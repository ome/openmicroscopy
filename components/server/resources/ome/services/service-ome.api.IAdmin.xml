<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<beans default-lazy-init="true">

  <alias name="internal-ome.api.IAdmin" alias="internal-ome.api.LocalAdmin"/>

  <bean parent="level2" name="internal-ome.api.IAdmin" class="ome.logic.AdminImpl">
    <description>
    Privileged bean which has several "private" references injected. This is not
    an example of what should be done.
    </description>
    <constructor-arg ref="simpleSqlAction"/>
    <constructor-arg ref="omeroSessionFactory"/>
    <constructor-arg ref="mailSender"/>
    <constructor-arg ref="templateMessage"/>
    <constructor-arg ref="aclVoter"/>
    <constructor-arg ref="roleProvider"/>
    <constructor-arg ref="passwordProvider"/>
    <constructor-arg ref="internal-ome.api.ILdap"/>
    <constructor-arg ref="passwordUtil"/>
    <constructor-arg ref="chmodStrategy"/>
    <constructor-arg ref="checksumProviderFactory"/>
  </bean>

  <bean id="loginAttemptListener" class="ome.security.auth.LoginAttemptListener" lazy-init="false">
    <constructor-arg index="0" value="${omero.security.login_failure_throttle_count}"/>
    <constructor-arg index="1" value="${omero.security.login_failure_throttle_time}"/>
  </bean>

  <alias name="${omero.security.password_provider}" alias="passwordProvider"/>

  <bean id="ldapPasswordProvider431" class="ome.security.auth.providers.LdapPasswordProvider431">
    <description>
        PasswordProvider which was the default LDAP implementation until 4.3.2. This implementation
        does NOT check the user_filter on every login, which is useful if any manual intervention
        is necessary by the sysadmin after a user has been created, e.g. when capitalization differs
        or a DN is changed.
    </description>
    <constructor-arg ref="passwordUtil"/>
    <constructor-arg ref="internal-ome.api.ILdap"/>
    <constructor-arg value="true"/>
  </bean>

  <bean id="ldapPasswordProvider" class="ome.security.auth.LdapPasswordProvider">
    <description>
        New LDAP PasswordProvider implementation as of 4.3.2 which checks the user_filter
        on every login. Due to other issues (DN synchronization and capitalization handling)
        this may not be the best implementation for all sites.
    </description>
    <constructor-arg ref="passwordUtil"/>
    <constructor-arg ref="internal-ome.api.ILdap"/>
    <constructor-arg value="true"/>
  </bean>

  <bean id="jdbcPasswordProvider" class="ome.security.auth.JdbcPasswordProvider">
    <constructor-arg ref="passwordUtil"/>
  </bean>

  <bean id="chainedPasswordProvider431" class="ome.security.auth.PasswordProviders">
    <constructor-arg>
      <list>
        <ref bean="ldapPasswordProvider431"/>
        <ref bean="jdbcPasswordProvider"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="chainedPasswordProvider" class="ome.security.auth.PasswordProviders">
    <constructor-arg>
      <list>
        <ref bean="ldapPasswordProvider"/>
        <ref bean="jdbcPasswordProvider"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="roleProvider" class="ome.security.auth.SimpleRoleProvider">
    <constructor-arg ref="securitySystem"/>
    <constructor-arg ref="omeroSessionFactory"/>
  </bean>

  <bean id="passwordUtil" class="ome.security.auth.PasswordUtil">
    <constructor-arg ref="simpleSqlAction"/>
    <constructor-arg ref="checksumProviderFactory"/>
  </bean>

  <bean name="managed-ome.api.IAdmin" parent="managedService">
    <property name="proxyInterfaces">
      <list>
        <value>ome.api.IAdmin</value>
        <value>ome.api.local.LocalAdmin</value>
      </list>
    </property>
    <property name="target" ref="internal-ome.api.IAdmin"/>
  </bean>

  <alias name="${omero.resetpassword.bean}" alias="mailSender"/>

  <bean id="mailSenderTargetSource"
      class="org.springframework.aop.target.HotSwappableTargetSource">
      <constructor-arg ref="javaMailSenderImpl"/>
  </bean>

  <bean id="defaultMailSender" class="org.springframework.aop.framework.ProxyFactoryBean">
      <description>
          Default mail sender uses a swappable target source so that for
          testing we can replace it with a no-op version.
      </description>
      <property name="targetSource" ref="mailSenderTargetSource"/>
  </bean>

  <!-- configure the MailSender with the authenticated session -->
  <bean id="javaMailSenderImpl"
      class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="${omero.resetpassword.host}" />
    <property name="port" value="${omero.resetpassword.port}" />
    <property name="protocol" value="${omero.resetpassword.mail.transport.protocol}" />
    <property name="session" ref="mailSession" />    
  </bean>
  
	<!-- setup an authenticated session -->
	<bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
		<constructor-arg>
			<props>
				<prop key="mail.smtp.auth">${omero.resetpassword.mail.smtp.auth}</prop>
				<prop key="mail.debug">${omero.resetpassword.mail.debug}</prop>
				<prop key="mail.smtp.starttls.enable">${omero.resetpassword.mail.smtp.starttls.enable}</prop>
				<prop key="mail.smtp.socketFactory.port">${omero.resetpassword.mail.smtp.socketFactory.port}</prop>
				<prop key="mail.smtp.socketFactory.class">${omero.resetpassword.mail.smtp.socketFactory.class}</prop>
				<prop key="mail.smtp.socketFactory.fallback">${omero.resetpassword.mail.smtp.socketFactory.fallback}</prop>	
				<prop key="mail.smtp.timeout">${omero.resetpassword.mail.smtp.timeout}</prop>			
			</props>
		</constructor-arg>
		<constructor-arg ref="smtpAuthenticator" />
	</bean>
  
  <!-- Authenticator implementation -->
    <bean id="smtpAuthenticator" class="ome.security.SmtpAuthenticator">
		<constructor-arg value="${omero.resetpassword.username}" />
		<constructor-arg value="${omero.resetpassword.password}" />
	</bean>

  <!-- this is a template message that we can pre-load with default state -->
  <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
    <property name="from" value="${omero.resetpassword.from}" />
  </bean>
  
</beans>
