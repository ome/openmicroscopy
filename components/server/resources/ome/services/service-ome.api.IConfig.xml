<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# Copyright 2006-2018 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!-- 
  Developer notes:
  ===============
  The name of this file is not critical but convention. In fact, you do not even
  need to create a separate file for your service, but can add the definitions
  to other spring files. To see what files Spring considers, look at the
  resources/beanRefContext.xml file. This file is covered by the value:

    classpath*:service-*.xml
  
-->

<beans>	

  <description>
  Service implementation ("internal-") and wrapper ("managed-") for the 
  ome.api.IConfig interface. 

  managed-ome.api.IConfig - This is for remoting and should only be apply 
    interceptors to the "internal" version below. essentially ignore.
  internal-ome.api.IConfig - This is the bean that needs to have items 
    injected. Used server side. If not available, everyone has to go 
    through the levels of interception

  </description>

  <bean parent="level2" id="internal-ome.api.IConfig" class="ome.logic.ConfigImpl">
    <description>
    The implementation of our interface. Provided with a JDBC template for 
    accessing the database time. Safe to use ONLY from within another service!
    </description>
    <property name="databaseIdentity" ref="databaseIdentity"/>
    <property name="sqlAction" ref="simpleSqlAction"/>
    <property name="preferenceContext" ref="preferenceContext"/>
    <property name="currentDetails" ref="currentDetails"/>
  </bean>
  
  <bean id="managed-ome.api.IConfig" parent="managedService">
    <description>
    An AOP-wrapped proxy for our implementation. Enforces all server policies.
    </description>
    <property name="proxyInterfaces" value="ome.api.IConfig"/>
    <property name="target" ref="internal-ome.api.IConfig"/>
  </bean>

  <bean class="ome.services.util.ReadOnlyConfigInit" lazy-init="false">
    <description>
    Includes among the configuration keys information about the read-only status as determined at run-time during start-up.
    </description>
    <constructor-arg ref="internal-ome.api.IConfig"/>
    <constructor-arg ref="readOnlyStatus"/>
  </bean>

<!--
  "Private" resources
  =======================================================================
  These are not really private in the sense that they are scoped and truly
  inaccessible, but more by convention that other services should probably
  not access them since they may change at any time, e.g.:
  
  <bean id="ome.api.IConfig:configDefaults" class="java.util.HashMap">
    <property name="db.hash" value="CAFEBABE"/>
  </bean>

-->  
  
</beans>
