<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright 2008-2014 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<beans>

  <bean id="processContainer" class="ome.services.blitz.repo.ProcessContainer">
  </bean>

  <bean id="legacyRepository" class="ome.services.blitz.repo.LegacyRepositoryI" destroy-method="close">
      <constructor-arg index="0" ref="BlitzAdapter"/>
      <constructor-arg index="1" ref="Registry"/>
      <constructor-arg index="2" ref="executor"/>
      <constructor-arg index="3" ref="repoPrincipal"/>
      <constructor-arg index="4" value="${omero.data.dir}"/>
      <constructor-arg index="5">
          <bean class="ome.services.blitz.repo.PublicRepositoryI">
              <constructor-arg ref="repositoryDao"/>
              <constructor-arg ref="checksumProviderFactory"/>
              <constructor-arg value="${omero.checksum.supported}"/>
              <constructor-arg value="${omero.fs.repo.path_rules}"/>
          </bean>
      </constructor-arg>
  </bean>
  <bean id="legacyRepositoryTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="legacyRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="legacyRepositoryTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <description>
    Runs periodically to give repositories a chance to take over for any dead
    instance. Calling takeover during regular initialization would cause startup
    to block. This is okay for separate repository (non-LegacyRepository) instances
    which run standalone, but not for this bean.
    </description>
    <property name="jobDetail" ref="legacyRepositoryTakeoverRun" />
    <property name="repeatInterval" value="60000" /><!-- millis -->
  </bean>

  <bean id="managedRepository" class="ome.services.blitz.repo.LegacyRepositoryI" destroy-method="close">
      <constructor-arg index="0" ref="BlitzAdapter"/>
      <constructor-arg index="1" ref="Registry"/>
      <constructor-arg index="2" ref="executor"/>
      <constructor-arg index="3" ref="repoPrincipal"/>
      <constructor-arg index="4" value="${omero.managed.dir}"/>
      <constructor-arg index="5">
          <bean class="ome.services.blitz.repo.ManagedRepositoryI">
              <constructor-arg value="${omero.fs.repo.path}"/>
              <constructor-arg ref="repositoryDao"/>
              <constructor-arg ref="processContainer"/>
              <constructor-arg ref="checksumProviderFactory"/>
              <constructor-arg value="${omero.checksum.supported}"/>
              <constructor-arg value="${omero.fs.repo.path_rules}"/>
              <constructor-arg ref="uuid"/>
              <constructor-arg ref="roles"/>
              <constructor-arg ref="managedRepoUuids"/>
          </bean>
      </constructor-arg>
  </bean>
  <bean id="managedRepositoryTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="managedRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="managedRepositoryTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <description>
    Runs periodically to give repositories a chance to take over for any dead
    instance. Calling takeover during regular initialization would cause startup
    to block. This is okay for separate repository (non-LegacyRepository) instances
    which run standalone, but not for this bean.
    </description>
    <property name="jobDetail" ref="managedRepositoryTakeoverRun" />
    <property name="repeatInterval" value="60000" /><!-- millis -->
  </bean>

  <bean id="scriptRepository" class="ome.services.blitz.repo.ScriptRepositoryI" destroy-method="close">
      <description>
        Script repository which makes the contents of lib/scripts available
        for processing.
      </description>
      <constructor-arg index="0" ref="BlitzAdapter"/>
      <constructor-arg index="1" ref="Registry"/>
      <constructor-arg index="2" ref="executor"/>
      <constructor-arg index="3" ref="repoPrincipal"/>
      <constructor-arg index="4" ref="scriptRepoHelper"/>
      <constructor-arg index="5">
          <bean class="ome.services.blitz.repo.PublicRepositoryI">
              <constructor-arg ref="repositoryDao"/>
              <constructor-arg ref="checksumProviderFactory"/>
              <constructor-arg value="${omero.checksum.supported}"/>
              <constructor-arg value="${omero.fs.repo.path_rules}"/>
          </bean>
      </constructor-arg>
      <constructor-arg ref="scriptRepoUuids"/>
  </bean>
  <bean id="scriptTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="scriptRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="scriptTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail" ref="scriptTakeoverRun" />
    <property name="repeatInterval" value="60000" />
  </bean>

  <!-- Params caching logic, see trac:10661 -->

  <bean id="paramsCache" class="ome.services.blitz.util.ParamsCache" lazy-init="false">
      <constructor-arg ref="Registry"/>
      <constructor-arg ref="roles"/>
      <constructor-arg ref="scriptRepoHelper"/>
      <constructor-arg value="${omero.scripts.cache.spec}"/>
  </bean>
  <bean id="paramsCacheRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="paramsCache" />
    <property name="targetMethod" value="lookupAll" />
  </bean>
  <bean id="paramsCacheTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
    <property name="cronExpression" value="${omero.scripts.cache.cron}"/>
    <property name="jobDetail" ref="paramsCacheRun"/>
  </bean>
  <bean id="paramsCacheStartupRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="paramsCache" />
    <property name="targetMethod" value="lookupAll" />
  </bean>
  <bean id="paramsCacheStartupTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="startDelay" value="15000"/>
    <property name="repeatCount" value="0"/>
    <property name="repeatInterval" value="86400000"/><!-- 1 day just in case -->
    <property name="jobDetail" ref="paramsCacheStartupRun"/>
  </bean>

</beans>
