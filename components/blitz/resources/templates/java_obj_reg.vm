#*
 *   $Id$
 *
 *   Copyright 2006-2011 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#
/*
 *   $$Id$$
 *
 *   Copyright 2006-2011 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

//
// ModelObjectFactoryRegistry generated by templates/java_objs_reg.vm
//

package omero.util;

import omero.util.ObjectFactoryRegistry;

import omero.model.DetailsI;
import omero.model.PermissionsI;

import Ice.Communicator;
import Ice.Object;

import java.util.Map;
import java.util.HashMap;

public class ModelObjectFactoryRegistry extends ObjectFactoryRegistry {

    public void setIceCommunicator(Communicator ic, omero.client client) {

        // Non-conditional
        ic.addObjectFactory(DetailsI.makeFactory(client), DetailsI.ice_staticId());
        ic.addObjectFactory(PermissionsI.Factory, PermissionsI.ice_staticId());

        // Conditional
        super.setIceCommunicator(ic);
    }

    @Override
    public void setIceCommunicator(Communicator ic) {

        // Non-conditional
        ic.addObjectFactory(DetailsI.Factory, DetailsI.ice_staticId());
        ic.addObjectFactory(PermissionsI.Factory, PermissionsI.ice_staticId());

        // Conditional
        super.setIceCommunicator(ic);
    }

    @Override
    public Map<String, ObjectFactory> createFactories(Ice.Communicator ic) {
        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>();
#foreach($type in $types)
#if(!$type.abstract)
        factories.put("::omero::model::${type.shortname}",
                new ObjectFactory("::omero::model::${type.shortname}") {
                    @Override
                    public Object create(String name) {
                        return new omero.model.${type.shortname}I();
                    }
                });
#end
#end
        return factories;
    }
}
#stop
