#*
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

package omero.util;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;


/**
 * Code-generated
 */
public class IceMap {

        private final static Map<Class, Class> _ome2omero = new HashMap<Class, Class>();
        private final static Map<Class, Class> _omero2ome = new HashMap<Class, Class>();

        /**
         * Unmodifiable map of ome.model.* classes to omero.model.* classes.
         */
        public final static Map<Class, Class> OMEtoOMERO;

        /**
         * Unmodifiable map of omero.model.* classes to ome.model.* classes.
         */
        public final static Map<Class, Class> OMEROtoOME;

        static {
#macro(put $longtype $shorttype)
#if(!$type.abstract)

#if(!$longtype.contains("ome.model.internal.Permissions") && !$longtype.contains("ome.model.internal.Details"))
        _ome2omero.put(${longtype}.Details.class,omero.model.DetailsI.class);
#end
        _ome2omero.put(${longtype}.class,omero.model.${shorttype}I.class);
        _omero2ome.put(omero.model.${shorttype}.class,${longtype}.class);
        _omero2ome.put(omero.model.${shorttype}I.class,${longtype}.class);
#end
#end
#foreach($type in $types)
#put($type.id $type.shortname)
#end
#put("ome.model.internal.Details" "Details")
#put("ome.model.internal.Permissions" "Permissions")

        //
        // Overriding values. This is primarily a workaround and a more
        // convenient way for specifying server-side implementation
        // classes needs to be worked out.
        //
        _ome2omero.put(ome.model.roi.Ellipse.class, omero.model.SmartEllipseI.class);
        _ome2omero.put(ome.model.roi.Line.class, omero.model.SmartLineI.class);
        _ome2omero.put(ome.model.roi.Mask.class, omero.model.SmartMaskI.class);
        _ome2omero.put(ome.model.roi.Path.class, omero.model.SmartPathI.class);
        _ome2omero.put(ome.model.roi.Point.class, omero.model.SmartPointI.class);
        _ome2omero.put(ome.model.roi.Polygon.class, omero.model.SmartPolygonI.class);
        _ome2omero.put(ome.model.roi.Polyline.class, omero.model.SmartPolylineI.class);
        _ome2omero.put(ome.model.roi.Rectangle.class, omero.model.SmartRectI.class);
        _ome2omero.put(ome.model.roi.Label.class, omero.model.SmartTextI.class);

        // Units
        _ome2omero.put(ome.model.units.ElectricPotential.class, omero.model.ElectricPotentialI.class);
        _omero2ome.put(omero.model.ElectricPotential.class, ome.model.units.ElectricPotential.class);
        _omero2ome.put(omero.model.ElectricPotentialI.class, ome.model.units.ElectricPotential.class);
        _ome2omero.put(ome.model.units.Frequency.class, omero.model.FrequencyI.class);
        _omero2ome.put(omero.model.Frequency.class, ome.model.units.Frequency.class);
        _omero2ome.put(omero.model.FrequencyI.class, ome.model.units.Frequency.class);
        _ome2omero.put(ome.model.units.Length.class, omero.model.LengthI.class);
        _omero2ome.put(omero.model.Length.class, ome.model.units.Length.class);
        _omero2ome.put(omero.model.LengthI.class, ome.model.units.Length.class);
        _ome2omero.put(ome.model.units.Power.class, omero.model.PowerI.class);
        _omero2ome.put(omero.model.Power.class, ome.model.units.Power.class);
        _omero2ome.put(omero.model.PowerI.class, ome.model.units.Power.class);
        _ome2omero.put(ome.model.units.Pressure.class, omero.model.PressureI.class);
        _omero2ome.put(omero.model.Pressure.class, ome.model.units.Pressure.class);
        _omero2ome.put(omero.model.PressureI.class, ome.model.units.Pressure.class);
        _ome2omero.put(ome.model.units.Temperature.class, omero.model.TemperatureI.class);
        _omero2ome.put(omero.model.Temperature.class, ome.model.units.Temperature.class);
        _omero2ome.put(omero.model.TemperatureI.class, ome.model.units.Temperature.class);
        _ome2omero.put(ome.model.units.Time.class, omero.model.TimeI.class);
        _omero2ome.put(omero.model.Time.class, ome.model.units.Time.class);
        _omero2ome.put(omero.model.TimeI.class, ome.model.units.Time.class);

        // Other
        _ome2omero.put(ome.model.internal.NamedValue.class, omero.model.NamedValue.class);
        _omero2ome.put(omero.model.NamedValue.class, ome.model.internal.NamedValue.class);

        // Sealing
        OMEtoOMERO = Collections.unmodifiableMap(_ome2omero);
        OMEROtoOME = Collections.unmodifiableMap(_omero2ome);
    }

}

