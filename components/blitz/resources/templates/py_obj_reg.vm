#*
 *
 *   Copyright 2012 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#
#
# Copyright 2012 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#

##
## ObjectFactory registrar generated by templates/py_objs_reg.vm
##

import Ice

#foreach($type in $types)
#if(!$type.abstract)
#set( $ObjFac = "${type.shortname}ObjectFactory" )
class ${ObjFac}(Ice.ObjectFactory):

    from omero_model_${type.shortname}I import ${type.shortname}I

    def create(self, type):
        return self.${type.shortname}I()

    def destroy(self):
        pass

#end
#end
class PermissionsObjectFactory(Ice.ObjectFactory):

    from omero_model_PermissionsI import PermissionsI

    def create(self, type):
        return self.PermissionsI()

    def destroy(self):
        pass

class DetailsObjectFactory(Ice.ObjectFactory):

    from omero_model_DetailsI import DetailsI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.DetailsI(self.client)

    def destroy(self):
        pass

class ElectricPotentialObjectFactory(Ice.ObjectFactory):

    from omero_model_ElectricPotentialI import ElectricPotentialI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.ElectricPotentialI(self.client)

    def destroy(self):
        pass

class FrequencyObjectFactory(Ice.ObjectFactory):

    from omero_model_FrequencyI import FrequencyI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.FrequencyI(self.client)

    def destroy(self):
        pass

class LengthObjectFactory(Ice.ObjectFactory):

    from omero_model_LengthI import LengthI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.LengthI(self.client)

    def destroy(self):
        pass

class PowerObjectFactory(Ice.ObjectFactory):

    from omero_model_PowerI import PowerI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.PowerI(self.client)

    def destroy(self):
        pass

class PressureObjectFactory(Ice.ObjectFactory):

    from omero_model_PressureI import PressureI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.PressureI(self.client)

    def destroy(self):
        pass

class TemperatureObjectFactory(Ice.ObjectFactory):

    from omero_model_TemperatureI import TemperatureI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.TemperatureI(self.client)

    def destroy(self):
        pass

class TimeObjectFactory(Ice.ObjectFactory):

    from omero_model_TimeI import TimeI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.TimeI(self.client)

    def destroy(self):
        pass

def conditionalAdd(name, ic, of):
    if not ic.findObjectFactory(name):
        ic.addObjectFactory(of, name)

def registerObjectFactory(ic, client = None):
    conditionalAdd("::omero::model::Permissions", ic, PermissionsObjectFactory())
    conditionalAdd("::omero::model::Details", ic, DetailsObjectFactory(client))
    conditionalAdd("::omero::model::ElectricPotential", ic, ElectricPotentialObjectFactory(client))
    conditionalAdd("::omero::model::Frequency", ic, FrequencyObjectFactory(client))
    conditionalAdd("::omero::model::Length", ic, LengthObjectFactory(client))
    conditionalAdd("::omero::model::Power", ic, PowerObjectFactory(client))
    conditionalAdd("::omero::model::Pressure", ic, PressureObjectFactory(client))
    conditionalAdd("::omero::model::Temperature", ic, TemperatureObjectFactory(client))
    conditionalAdd("::omero::model::Time", ic, TimeObjectFactory(client))
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::omero::model::${type.shortname}", ic,  ${type.shortname}ObjectFactory())
#end
#end

#stop
