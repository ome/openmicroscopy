#*
 *   $Id$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#
/*
 *   $$Id$$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

//
// ObjectFactory registrar generated by templates/cpp_objs_reg.vm
//

\#include <omero/ObjectFactoryRegistrar.h>
\#include <omero/model/ElectricPotentialI.h>
\#include <omero/model/FrequencyI.h>
\#include <omero/model/LengthI.h>
\#include <omero/model/PressureI.h>
\#include <omero/model/PowerI.h>
\#include <omero/model/LengthI.h>
\#include <omero/model/LengthI.h>
\#include <omero/model/TemperatureI.h>
\#include <omero/model/ObjectFactory.h>
\#include <omero/model/TimeI.h>
#foreach($type in $types)
#if(!$type.abstract)
\#include <omero/model/${type.shortname}I.h>
#end
#end

namespace omero {
  namespace model {

#foreach($type in $types)
#if(!$type.abstract)
#set( $ObjFac = "${type.shortname}ObjectFactory" )
    class ${ObjFac} : virtual public Ice::ObjectFactory {

        public:
        ${ObjFac}() : Ice::ObjectFactory() { }

        ~${ObjFac}() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::${type.shortname}I();
        }

        void destroy() {}

    };
#end
#end

    class PermissionsObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PermissionsObjectFactory() : Ice::ObjectFactory() { }

        ~PermissionsObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::PermissionsI();
        }

        void destroy() {}

    };

    class ElectricPotentialObjectFactory : virtual public Ice::ObjectFactory {

        public:
        ElectricPotentialObjectFactory() : Ice::ObjectFactory() { }

        ~ElectricPotentialObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::ElectricPotentialI();
        }

        void destroy() {}

    };

    class FrequencyObjectFactory : virtual public Ice::ObjectFactory {

        public:
        FrequencyObjectFactory() : Ice::ObjectFactory() { }

        ~FrequencyObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::FrequencyI();
        }

        void destroy() {}

    };

    class LengthObjectFactory : virtual public Ice::ObjectFactory {

        public:
        LengthObjectFactory() : Ice::ObjectFactory() { }

        ~LengthObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::LengthI();
        }

        void destroy() {}

    };

    class PowerObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PowerObjectFactory() : Ice::ObjectFactory() { }

        ~PowerObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::PowerI();
        }

        void destroy() {}

    };

    class PressureObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PressureObjectFactory() : Ice::ObjectFactory() { }

        ~PressureObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::PressureI();
        }

        void destroy() {}

    };

    class TemperatureObjectFactory : virtual public Ice::ObjectFactory {

        public:
        TemperatureObjectFactory() : Ice::ObjectFactory() { }

        ~TemperatureObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::TemperatureI();
        }

        void destroy() {}

    };

    class TimeObjectFactory : virtual public Ice::ObjectFactory {

        public:
        TimeObjectFactory() : Ice::ObjectFactory() { }

        ~TimeObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new omero::model::TimeI();
        }

        void destroy() {}

    };

  void conditionalAdd(const std::string& name, const Ice::CommunicatorPtr& ic, const Ice::ObjectFactoryPtr& of) {

    if (0==ic->findObjectFactory(name)) {
      ic->addObjectFactory(of, name);
    }

  }

  void registerObjectFactory(const Ice::CommunicatorPtr& ic) {
    conditionalAdd("::omero::model::Permissions", ic, new PermissionsObjectFactory());
    conditionalAdd("::omero::model::ElectricPotential", ic, new ElectricPotentialObjectFactory());
    conditionalAdd("::omero::model::Frequency", ic, new FrequencyObjectFactory());
    conditionalAdd("::omero::model::Length", ic, new LengthObjectFactory());
    conditionalAdd("::omero::model::Power", ic, new PowerObjectFactory());
    conditionalAdd("::omero::model::Pressure", ic, new PressureObjectFactory());
    conditionalAdd("::omero::model::Temperature", ic, new TemperatureObjectFactory());
    conditionalAdd("::omero::model::Time", ic, new TimeObjectFactory());
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::omero::model::${type.shortname}", ic,  new ${type.shortname}ObjectFactory());
#end
#end
  }

    } // End model
} // End omero
#stop
