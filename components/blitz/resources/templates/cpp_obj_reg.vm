#*
 *   $Id$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#
/*
 *   $$Id$$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

//
// ObjectFactory registrar generated by templates/cpp_objs_reg.vm
//

\#include <omero/ObjectFactoryRegistrar.h>
#foreach($type in $types)
#if(!$type.abstract)
\#include <omero/model/${type.shortname}I.h>
#end
#end

namespace omero {

#foreach($type in $types)
#if(!$type.abstract)
#set( $ObjFac = "${type.shortname}ObjectFactory" )
    class ${ObjFac} : virtual public Ice::ObjectFactory {
    public:
	${ObjFac}() : Ice::ObjectFactory() { }

	~${ObjFac}() {}

	Ice::ObjectPtr create(const std::string& type) {
	    return new omero::model::${type.shortname}I();
        }

	void destroy() {}
    };
#end
#end

    class PermissionsObjectFactory : virtual public Ice::ObjectFactory {
    public:
	PermissionsObjectFactory() : Ice::ObjectFactory() { }

	~PermissionsObjectFactory() {}

	Ice::ObjectPtr create(const std::string& type) {
	    return new omero::model::PermissionsI();
	}

	void destroy() {}

    };

    class DetailsObjectFactory : virtual public Ice::ObjectFactory {
    protected:
    // This must be stored as a raw pointer to prevent circular ref with client
	const omero::client* client;
    public:
	DetailsObjectFactory(
            const omero::client* client = NULL)
                : Ice::ObjectFactory(), client(client) { }

	~DetailsObjectFactory() {}

	Ice::ObjectPtr create(const std::string& type) {
	    return new omero::model::DetailsI(client);
	}

	void destroy() {}

    };

  void conditionalAdd(const std::string& name, const Ice::CommunicatorPtr& ic, const Ice::ObjectFactoryPtr& of) {

    if (0==ic->findObjectFactory(name)) {
      ic->addObjectFactory(of, name);
    }

  }

  void registerObjectFactory(const Ice::CommunicatorPtr ic,
        const omero::client* client) {
    conditionalAdd("::omero::model::Permissions", ic, new PermissionsObjectFactory());
    conditionalAdd("::omero::model::Details", ic, new DetailsObjectFactory(client));
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::omero::model::${type.shortname}", ic,  new ${type.shortname}ObjectFactory());
#end
#end
  }

} // End omero
#stop
