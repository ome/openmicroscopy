<?xml version="1.0" encoding="utf-8"?>
<project name="blitz" default="install" basedir=".">

    <property name="import.dir" value="${basedir}/../antlib/resources"/>
    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>

    <!-- Class that will be called via "java -jar" on this artifact -->
    <property name="main.class" value="ome.services.blitz.Entry"/>

        <target name="clean" depends="lifecycle.clean">
            <delete dir ="${basedir}/generated"/>
            <delete dir="${basedir}/omero"/>
            <delete file="${basedir}/.sconsign.dblite"/>
        </target>

    <target name="compile" depends="generate,_compile" unless="skip.compile"/>
    <target name="_compile" description="Internal develop target which doesn't run codegen">
        <if>
            <uptodate targetfile="${target.dir}/blitz.jar">
                <srcfiles dir="${basedir}" includes="**/*.java,**/*.ice,**/*.vm"/>
            </uptodate>
        <then>
            <echo>Up to date</echo>
        </then>
        <else>
            <antcall target="icegen" inheritRefs="true" inheritAll="true"/>
            <myjavac>
                <src path="${src.dir}"/>
                <src path="${src.dest}"/>
                <src path="${basedir}/generated"/>
            </myjavac>
        </else>
        </if>
    </target>

    <!-- = = = = = = = = = = = = = = = = =
          generate model
         = = = = = = = = = = = = = = = = = -->

        <macrodef name="split-combined">
            <attribute name="all" default="all"/>
            <attribute name="prefix"/>
            <attribute name="todir"/>
            <element name="filesetAndMapper" implicit="true"/>
            <sequential>
            <copy todir="@{todir}" encoding="utf-8" outputencoding="utf-8">
                <filesetAndMapper/>
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="^\[@{all}\]|^\[@{prefix}\]"/>
                    </linecontainsregexp>
                    <tokenfilter>
                        <replaceregex pattern="^\[@{all}\]\s?" replace=""/>
                        <replaceregex pattern="^\[@{prefix}\]\s?" replace=""/>
                    </tokenfilter>
                </filterchain>
            </copy>
            </sequential>
        </macrodef>

	<target name="icegen-init">
		<macrodef name="checkicegen">
			<attribute name="dependfile"/>
			<attribute name="template"/>
			<sequential>
			<uptodate property="icegen.@{template}.unneeded">
				<srcfiles dir="${model.comp}/resources" includes="${dsl.pat}"/>
				<mapper type="merge" to="@{dependfile}"/>
			</uptodate>
			</sequential>
		</macrodef>
		<checkicegen template="combined" dependfile="${comb.dir}/ImageI.combined"/>
		<condition property="icegen.unneeded">
			<and>
				<isset property="icegen.combined.unneeded"/>
			</and>
		</condition>
		<property name="gen.dir" value="${basedir}/generated"/>
		<property name="comb.dir" value="${basedir}/target/combined"/>
		<mkdir dir="${comb.dir}/omero/api"/>
		<mkdir dir="${comb.dir}/omero/cmd"/>
		<mkdir dir="${comb.dir}/omero/model"/>
		<mkdir dir="${gen.dir}/omero/api"/>
		<mkdir dir="${gen.dir}/omero/cmd"/>
		<mkdir dir="${gen.dir}/omero/model"/>
	</target>


        <target name="icegen" depends="prepare,icegen-init,icegen1,icegen2"/>

        <target name="icegen1" unless="icegen.unneeded">
		<taskdef classname="ome.dsl.DSLTask" classpathref="omero.classpath" name="basedsl"/>
		<presetdef name="dsl">
			<basedsl profile="${omero.db.profile}"/>
		</presetdef>

		<!-- Not "combined" files-->
		<dsl template="${resrc.dir}/templates/java_ice_map.vm" filepattern="${gen.dir}/omero/util/IceMap.java">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}"/>
		</dsl>
		<dsl template="${resrc.dir}/templates/java_obj_reg.vm" filepattern="${gen.dir}/omero/util/ModelObjectFactoryRegistry.java">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}"/>
		</dsl>
		<dsl template="${resrc.dir}/templates/cpp_obj_reg.vm" filepattern="${gen.dir}/omero/model/ObjectFactory.cpp">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}"/>
		</dsl>
		<dsl template="${resrc.dir}/templates/py_obj_reg.vm" filepattern="${gen.dir}/omero/ObjectFactoryRegistrar.py">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}"/>
		</dsl>

		<dsl template="${resrc.dir}/templates/combined.vm" filepattern="${comb.dir}/{class-name}I.combined">
			<fileset dir="${model.comp}/resources" includes="${dsl.pat}"/>
		</dsl>
        </target>

        <target name="icegen2">
		<!--
		    This section takes the output of the combined.vm template and splits it into
		    the various sections. All of these files represent the Ice model and our
		    specializations of it
		-->
		<selector id="ifNewerThanOutput">
			<depend targetdir="${gen.dir}/omero/model/">
				<mapper>
					<flattenmapper/>
					<mapper type="glob" from="*" to="*"/>
				</mapper>
			</depend>
		</selector>
		<split-combined todir="${gen.dir}" prefix="hdr">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.h"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="cpp">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.cpp"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="jav">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1I.java"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="pyc">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero_model_\1I.py"/>
		</split-combined>
		<split-combined todir="${gen.dir}" prefix="ice">
			<fileset dir="${comb.dir}" includes="**/*.combined">
				<selector refid="ifNewerThanOutput"/>
			</fileset>
			<regexpmapper from="(.*?)I[.]combined" to="omero/model/\1.ice"/>
		</split-combined>

		<!--
		    By deleting from the target directory what already exists under
		    src/ or resources/ it is possible to override code generation.
		-->
		<delete>
			<fileset dir="${gen.dir}" includes="**/*.java">
				<present present="both" targetdir="${src.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.ice">
				<present present="both" targetdir="${resrc.dir}"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.h">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
			<fileset dir="${gen.dir}" includes="**/*.cpp">
				<present present="both" targetdir="${src.dir}/cpp"/>
			</fileset>
		</delete>
		<scons_py>
			<arg value="-Q"/>
		</scons_py>
	</target>

    <target name="test-compile" depends="lifecycle.test-compile"
        description="Unjars test dependencies and then calls lifecycle.test-compile">
        <unjar src="${target.dir}/libs/test/common-test.jar"
            dest="${classes.dir}">
            <patternset>
                <include name="original_metadata.txt"/>
            </patternset>
        </unjar>
    </target>

	<target name="dist" depends="package,install" unless="skip.compile"><!-- install for standalone -->
	  <copy todir="${dist.dir}/include">
	    <fileset dir="${resrc.dir}"  includes="**/*.ice,**/*.h"/>
	    <fileset dir="${resrc.dest}" includes="**/*.ice,**/*.h"/>
	    <fileset dir="${basedir}/generated" includes="**/*.ice,**/*.h"/>
	  </copy>
	</target>

    <target name="headers" description="Run checkstyle header check " depends="load-findbugs">
        <do-checkstyle config="${omero.home}/docs/styles/headers.xml" toFile="${target.dir}/headers.xml" failOnViolation="true">
            <fileset dir="${basedir}">
                <exclude name="**/generated/**"/><!-- Ice generated; TODO: check our code -->
                <exclude name="**/org/hibernate/stat/ConcurrentStatisticsImpl.java"/><!-- Hibernate override -->
                <include name="**/*"/>
            </fileset>
        </do-checkstyle>
    </target>

</project>
