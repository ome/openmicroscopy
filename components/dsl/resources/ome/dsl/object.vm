##
##  Copyright (c) 2007 Glencoe Software Inc. All rights reserved.
##  Use is subject to license terms supplied in LICENSE.txt
##
##
##  SETUP
##
#set($ofilter = "${type.table}_owner_filter")
#set($gfilter = "${type.table}_group_filter")
#set($efilter = "${type.table}_event_filter")
#set($pfilter = "${type.table}_perms_filter")

## See #1679, #2142 and various others
#set($cascadeEjb = "javax.persistence.CascadeType.MERGE,")
#set($cascadeEjb = "$cascadeEjb javax.persistence.CascadeType.PERSIST,")
#set($cascadeEjb = "$cascadeEjb javax.persistence.CascadeType.REFRESH")
#set($cascadeHib = "org.hibernate.annotations.CascadeType.LOCK,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.MERGE,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.PERSIST,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.REPLICATE,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.REFRESH,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.SAVE_UPDATE,")
#set($cascadeHib = "$cascadeHib org.hibernate.annotations.CascadeType.EVICT")

#set($errorIfUnloaded = "if (! _loaded ) errorIfUnloaded();" )
##
##
##
##
/*
 *   This file was generated by dsl/resources/ome/dsl/object.vm
 *
 *   Copyright (c) 2007 Glencoe Software Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

package ${type.package};

import ome.conditions.*;
import ome.model.*;

#if(!$type.superclass && !$type.global)
/**
 * These filter definitions are used by the security system
 * to eliminate non-readable objects from queries. The regular
 * user does not need to worry about them, as they will be
 * injected directly into the SQL (not HQL)
 */
@org.hibernate.annotations.FilterDefs({
    @org.hibernate.annotations.FilterDef(name="${ofilter}",
        parameters=@org.hibernate.annotations.ParamDef( name="ownerId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${gfilter}",
        parameters=@org.hibernate.annotations.ParamDef( name="groupId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${efilter}",
        parameters=@org.hibernate.annotations.ParamDef( name="eventId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${pfilter}",
        parameters=@org.hibernate.annotations.ParamDef( name="permsStr", type="java.lang.String" ))#foreach( $prop in $type.classProperties )#if($prop.one2Many),
    @org.hibernate.annotations.FilterDef(name="${ofilter}_${prop.nameUpper}",
        parameters=@org.hibernate.annotations.ParamDef( name="ownerId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${gfilter}_${prop.nameUpper}",
        parameters=@org.hibernate.annotations.ParamDef( name="groupId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${efilter}_${prop.nameUpper}",
        parameters=@org.hibernate.annotations.ParamDef( name="eventId", type="java.lang.Long" )),
    @org.hibernate.annotations.FilterDef(name="${pfilter}_${prop.nameUpper}",
        parameters=@org.hibernate.annotations.ParamDef( name="permsStr", type="java.lang.String" ))
#end
#end
})
##if(!$type.superclass && !$type.global)
@org.hibernate.annotations.Filters({
    // See the comments on filters above
    @org.hibernate.annotations.Filter(name="${ofilter}", condition=":ownerId = owner_id"),
    @org.hibernate.annotations.Filter(name="${gfilter}", condition=":groupId = group_id"),
    @org.hibernate.annotations.Filter(name="${efilter}", condition=":eventId = event_id"),
    @org.hibernate.annotations.Filter(name="${pfilter}", condition=":permsStr = permissions"),
    @org.hibernate.annotations.Filter(name="OneGroupSecurityFilter"),
    @org.hibernate.annotations.Filter(name="AllGroupsSecurityFilter"),
#if($type.id.equals("ome.model.acquisition.Detector"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT detector.id FROM detector*, image* WHERE " +
        "detector.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.DetectorSettings"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT detectorsettings.id FROM detectorsettings*, detector*, image* WHERE " +
        "detectorsettings.detector = detector.id AND detector.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.Dichroic"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT dichroic.id FROM dichroic*, image* WHERE " +
        "dichroic.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.Filter"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT filter.id FROM filter*, image* WHERE " +
        "filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.FilterSet"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT filterset.id FROM filterset*, image* WHERE " +
        "filterset.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.FilterSetEmissionFilterLink"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT link.id FROM filtersetemissionfilterlink AS link*, filter*, image* WHERE " +
        "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.FilterSetExcitationFilterLink"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT link.id FROM filtersetexcitationfilterlink AS link*, filter*, image* WHERE " +
        "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.ImagingEnvironment"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT imagingenvironment FROM image* WHERE " +
        "id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.Instrument"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT instrument FROM image* WHERE " +
        "id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.LightPath"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT logicalchannel.lightpath FROM logicalchannel*, channel*, pixels* WHERE " +
        "logicalchannel.id = channel.logicalchannel AND channel.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.LightPathEmissionFilterLink"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT link.id FROM lightpathemissionfilterlink AS link*, filter*, image* WHERE " +
        "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.LightPathExcitationFilterLink"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT link.id FROM lightpathexcitationfilterlink AS link*, filter*, image* WHERE " +
        "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.LightSettings"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT lightsettings.id FROM lightsettings*, logicalchannel*, channel*, pixels* WHERE " +
        "lightsettings.id = logicalchannel.lightsourcesettings AND logicalchannel.id = channel.logicalchannel AND channel.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.LightSource"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT lightsource.id FROM lightsource*, image* WHERE " +
        "lightsource.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.Microscope"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT instrument.microscope FROM instrument*, image* WHERE " +
        "instrument.id = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.Objective"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT objective.id FROM objective*, image* WHERE " +
        "objective.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.ObjectiveSettings"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT objectivesettings FROM image* WHERE " +
        "id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.OTF"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT otf.id FROM otf*, image* WHERE " +
        "otf.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.StageLabel"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT stagelabel FROM image* WHERE " +
        "id IN (:images)))")
#elseif($type.id.equals("ome.model.acquisition.TransmittanceRange"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT filter.transmittancerange FROM filter*, image* WHERE " +
        "filter.instrument = image.instrument AND image.id IN (:images)))")
#elseif($type.id.equals("ome.model.core.Channel"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT channel.id FROM channel*, pixels* WHERE " +
        "channel.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.core.Image"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (:images))")
#elseif($type.id.equals("ome.model.core.LogicalChannel"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT channel.logicalchannel FROM channel*, pixels* WHERE " +
        "channel.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.core.OriginalFile"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT pofm.parent FROM pixelsoriginalfilemap AS pofm*, pixels* WHERE " +
        "pofm.child = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.core.Pixels"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "image IN (:images))")
#elseif($type.id.equals("ome.model.core.PixelsOriginalFileMap"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT pofm.id FROM pixelsoriginalfilemap AS pofm*, pixels* WHERE " +
        "pofm.child = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.core.PlaneInfo"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT planeinfo.id FROM planeinfo*, pixels* WHERE " +
        "planeinfo.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.ChannelBinding"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT channelbinding.id FROM channelbinding*, renderingdef*, pixels* WHERE " +
        "channelbinding.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.CodomainMapContext"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT codomainmapcontext.id FROM codomainmapcontext*, renderingdef*, pixels* WHERE " +
        "codomainmapcontext.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.ProjectionDef"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT projectiondef.id FROM projectiondef*, renderingdef*, pixels* WHERE " +
        "projectiondef.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.QuantumDef"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT renderingdef.quantization FROM renderingdef*, pixels* WHERE " +
        "renderingdef.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.RenderingDef"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT renderingdef.id FROM renderingdef*, pixels* WHERE " +
        "renderingdef.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.display.Thumbnail"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT thumbnail.id FROM thumbnail*, pixels* WHERE " +
        "thumbnail.pixels = pixels.id AND pixels.image IN (:images)))")
#elseif($type.id.equals("ome.model.stats.StatsInfo"))
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
        "id IN (SELECT channel.statsinfo FROM channel*, pixels* WHERE " +
        "channel.pixels = pixels.id AND pixels.image IN (:images)))")
#else
    @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0)")
#end
})
#elseif($type.id.equals("ome.model.meta.Session"))
@org.hibernate.annotations.FilterDefs({
    @org.hibernate.annotations.FilterDef(name="owner_or_admin",
            parameters={
                @org.hibernate.annotations.ParamDef( name="current_user", type="java.lang.Long" ),
                @org.hibernate.annotations.ParamDef( name="is_admin", type="java.lang.Integer" )})
})
@org.hibernate.annotations.Filters({
    @org.hibernate.annotations.Filter(name="owner_or_admin", condition="(1 = :is_admin or owner = :current_user)")
})
#elseif($type.id.equals("ome.model.meta.Node"))
@org.hibernate.annotations.FilterDefs({
    @org.hibernate.annotations.FilterDef(name="owner_or_admin",
            parameters={
                @org.hibernate.annotations.ParamDef( name="current_user", type="java.lang.Long" ),
                @org.hibernate.annotations.ParamDef( name="is_admin", type="java.lang.Integer" )})
})
@org.hibernate.annotations.Filters({
    @org.hibernate.annotations.Filter(name="owner_or_admin", condition="(1 = :is_admin)")
})
#end
@javax.persistence.Entity
##
## Determine inheritance type
##
###############################################################
#if($type.superclass)
## JOINED SUBCLASS
#set($superId = ${type.typeToColumn($type.superclass)} )
#if(!$type.discriminator)
@javax.persistence.PrimaryKeyJoinColumn(name="${superId}_id")
@javax.persistence.Table(name = "${type.tableName()}")
#set($fkvalue = "FK${type.table}_${superId}_id_${superId}")
#set($fkvalue = "${type.fk($fkvalue)}")
@org.hibernate.annotations.ForeignKey(name="${fkvalue}")
#else
## SINGLETABLE SUBCLASS
@javax.persistence.DiscriminatorValue("${type.discriminator}")
#end
#else##########################################################
## TOP OF HIERARCHY
@javax.persistence.Table(name = "${type.tableName()}", uniqueConstraints = {
#set( $comma = "0" )
#foreach($cols in $type.uniqueConstraints)
#if( $comma == ""  )#set( $comma = ",")#end
#if( $comma == "0" )#set( $comma = "" )#end
    $comma @javax.persistence.UniqueConstraint(columnNames={$cols})
#set( $comma = "," )
#end
})
@org.hibernate.annotations.Entity( selectBeforeUpdate = true )
#if(!$type.discriminator)
## ...OF JOINED TABLES
@javax.persistence.Inheritance(strategy=javax.persistence.InheritanceType.JOINED)
#else
## ... IN A SINGLE TABLE
@javax.persistence.Inheritance(strategy=javax.persistence.InheritanceType.SINGLE_TABLE)
@javax.persistence.DiscriminatorValue("${type.discriminator}")
@javax.persistence.DiscriminatorColumn(
    name="discriminator", discriminatorType=javax.persistence.DiscriminatorType.STRING
)
#end
@org.hibernate.annotations.GenericGenerator(name = "seq_${type.table}",
        strategy = "ome.util.TableIdGenerator",
        parameters = {
            @org.hibernate.annotations.Parameter(name = "table_name", value = "seq_table"),
            @org.hibernate.annotations.Parameter(name = "segment_value", value = "seq_${type.sequenceName}"),
            @org.hibernate.annotations.Parameter(name = "optimizer", value = "pooled"),
            @org.hibernate.annotations.Parameter(name = "increment_size", value = "50")
        })
#end############################################################
#if(!$type.abstract)
@org.hibernate.search.annotations.Indexed(index="FullText")
#end
@org.hibernate.search.annotations.ClassBridge(
    name="details",
    impl = ome.util.DetailsFieldBridge.class,
    index=org.hibernate.search.annotations.Index.UN_TOKENIZED,
    store=org.hibernate.search.annotations.Store.NO
)
#if("" != $type.check)
@org.hibernate.annotations.Check(constraints="${type.check}")
#end
public #if($type.abstract)abstract#end class ${type.shortname}
#if($type.superclass)extends $type.superclass #end
implements java.io.Serializable, IObject
#if($type.global), IGlobal#end#if(!$type.immutable), IMutable#end
#if($type.isEnum), IEnum#end
#if($type.isAnnotationLink), IAnnotationLink#elseif($type.isLink), ILink#end
#if($type.annotated), IAnnotated#end
{

   /* These values are defined in dsl/resources/ome/dsl/object.vm:
    * -------------------------------------------------------------
    * Explanation of serialVersionUID ex 0000000 03 00 00 01 03 01 L;
    * 1-7   : currently unused
    * 8-9   : major part (3.x.x)
    * 10-11 : minor part (x.0.x)
    * 12-13 : patch part (x.x.0)
    * 14-15 : release type   (B)
    * 16-17 : release number (3)
    * 18-19 : increment per delta // any changes to the dsl or mapping files
    */
    private static final long serialVersionUID = 0000000030000020302L;

#if(!$type.global)
   /*
    * Constants naming filters used by the OMERO
    * security system.
    */
    public final static String OWNER_FILTER = "${ofilter}";
    public final static String GROUP_FILTER = "${gfilter}";
    public final static String EVENT_FILTER = "${efilter}";
    public final static String PERMS_FILTER = "${pfilter}";
#end

    public ${type.shortname} () {
        this(null, true);
    }

    protected ${type.shortname} (Long id) {
        this(id, true);
    }

    /**
     * Main constructor.
     */
    public ${type.shortname} (Long id, boolean loaded) {
#if($type.superclass)
        super(id, loaded);
#else
        setId(id);
        if (loaded) {
            getDetails().setContext(this);
        } else {
            if (this.id == null) {
                throw new ApiUsageException("Id cannot be null for a proxy");
            }
            unload();
        }
#end
    }

#if($type.isEnum)
    public ${type.shortname} (String value) {
        this(null, true);
        setValue(value);
    }
#end

## (1) Check if needed
#if($type.requiredSingleProperties.size() > 0 && !$type.isEnum)
    public ${type.shortname}(
##
## Add ctor arguments, with a comma if not the first
##
#set($comma = "")
#foreach($prop in $type.requiredSingleProperties)$comma${prop.fieldType} _${prop.name}#set($comma = ",")#end
    ) {
        this(null, true);
#foreach($prop in $type.requiredSingleProperties)
        set${prop.nameCapped}(_${prop.name});
#end
    }
#end## END ctorWithRequiredNeeded

#if(!${type.superclass})
    public final static String ID = "${type.id}_id";
    
    protected Long id;

   /**
    * The DB unique identifier for this object. You are not responsible for
    * setting the id; however, it can be useful for creating "unloaded"
    * versions of your objects.
    *
    * Each top-level entity contains an id field of type long.
    * For all objects returned from the server, this value will
    * be non-null, which doesn't necessarily hold for the other
    * fields.
    */
    @javax.persistence.Id
    @javax.persistence.GeneratedValue(
        strategy=javax.persistence.GenerationType.SEQUENCE,
        generator="seq_${type.table}") 
    @org.hibernate.search.annotations.DocumentId
    @Override
    public Long getId() {
        return this.id;
    }

    @Override
    public void setId(Long id) {
        this.id = id;
    }

#end

   /*
    *    INTERFACE-BASED
    *    Several properties are defined by whether or not
    *    the OME definition has certain interfaces.
    */

#if(!${type.immutable} && !${type.superclass})
    public final static String VERSION = "${type.id}_version";

    protected Integer version = 0;

   /**
    * This version number is controlled by the database for optimisitic
    * locking.
    */
    @javax.persistence.Column(name="version") 
    // @javax.persistence.Version 
//TODO mark off #118 if this succeeds, otherwise, completely remove versions and test updateEvent
    @Override
    public Integer getVersion() {
        $errorIfUnloaded
        return this.version;
    }

    @Override
    public void setVersion(Integer version) {
        $errorIfUnloaded
        this.version = version;
    }

#end

   /*
    *    PROPERTIES
    *    All properties which follow are straight-forward
    *    and can be understood using only the Hibernate
    *    documentation.
    */

#foreach($prop in $type.classProperties)#######################################EACH
##
##  Now we iterate throug each of the properties and based on the type we 
##  generate the appropriate methods.
##
##
## SETUP
##
## Property to be used only within the property loop which is guaranteed to be reset
## This is used only for one-to-many (collection-valued) relationships
## If this is a link, cascadeHibCollection will be reset to all-delete-orphan
#set( $cascadeHibCollection = ${cascadeHib} )
##
#if( $prop.isLink )
#set( $LinkType = ${prop.type} )
#set( $Link = ${prop.shortType} )
#if($prop.class.name == "ome.dsl.ChildLink" )
#set( $order = "this, addition" )
#set( $next = "parent" )
#set( $other = "child" )
#set( $cascadeHibCollection = "org.hibernate.annotations.CascadeType.ALL, org.hibernate.annotations.CascadeType.DELETE_ORPHAN" )
#elseif($prop.class.name == "ome.dsl.ParentLink")
#set( $order = "addition, this" )
#set( $next = "child" )
#set( $other = "parent" )
#set( $cascadeHibCollection = "org.hibernate.annotations.CascadeType.ALL, org.hibernate.annotations.CascadeType.DELETE_ORPHAN" )
#end
#elseif($prop.ordered)
#set( $cascadeHibCollection = "org.hibernate.annotations.CascadeType.ALL, org.hibernate.annotations.CascadeType.DELETE_ORPHAN" )
#end
##
    protected ${prop.fieldType} ${prop.name} = ${prop.fieldInitializer};

#if($prop.name == "details") #############################################TYPE

   /**
    * The details of this object correspond to low-level system
    * information. Owner, permissions, Details is always guaranteed
    * to be non-null, unless the user actively nulls it.
    *
    * Every entity also contains a Detail reference, which doesn't
    * refer to a separate table but rather to a collection of fields
    * collected into a Hibernate "component" which is embedded in the
    * object.
    *
    * HQL queries which refer to the Details component cannot directly
    * fetch the entity like this:
    *
    *    select o from Object join fetch o.details
    *
    * but rather each field of the Details instance must be explicitly
    * joined:
    *
    *    select o from Object join fetch o.details.owner
    *
    * It should also be noted that not all types have all the fields
    * which are present on Details. For example,
    *
    *    select e from Experimenter e join fetch e.details.owner
    *
    * will fail. Experimenter has no owner, for obvious reasons.
    *
    * Note: subclasses of this class will return a subclass of
    * the {@link ome.model.internal.Details} type.
    */
    @javax.persistence.Embedded
    @org.hibernate.annotations.Target(Details.class)
    @Override
    public ome.model.internal.Details getDetails() {
        $errorIfUnloaded
        return this.details;
    }

   /**
    * Use the {@link ome.model.internal.Details#copy(ome.model.internal.Details)}
    * or {@link ome.model.internal.Details#shallowCopy(ome.model.internal.Details)}
    * methods to set the {@link Details} instance instead.
    */
    protected void setDetails(ome.model.internal.Details details) {
        $errorIfUnloaded
        this.details = (Details) details;
    }


#elseif($prop.class.name == "ome.dsl.MapField")#############################TYPE
##
##  MapFields are collections of primitives which can be stored in a single
##  row/field of some model object.
##

    public void set${prop.nameCapped}(${prop.fieldType} map) {
        this.${prop.name} = map;
    }

    @javax.persistence.ElementCollection(fetch = javax.persistence.FetchType.EAGER)
    @javax.persistence.OrderColumn(name="index")
    @javax.persistence.CollectionTable(name="${type.tableName()}_${prop.name}",
        joinColumns = @javax.persistence.JoinColumn(name="${type.tableName()}_id"))
    @javax.persistence.Column(name="${prop.name}", nullable=false)
    @org.hibernate.annotations.ForeignKey(name="FK${type.tableName()}_${prop.name}_map")
    public ${prop.fieldType} get${prop.nameCapped}() {
        return this.${prop.name};
    }
#elseif($prop.class.name == "ome.dsl.EntryField")#############################TYPE
##
##  EntryFields are handled by ome/dsl/data.vm, since each of the entries isn't
##  a real property but rather an enum value for the database. However, they
##  are not even returned by $type.classProperties only $type.properties
##
#elseif($prop.one2Many)###################################################TYPE
##
##
#if(!$prop.actualTarget.global)
   /*
    * Filter names which are used by the security system to turn on filters
    * for this particular collection.
    */
    public final static String OWNER_FILTER_${prop.nameUpper} = "${ofilter}_${prop.nameUpper}";
    public final static String GROUP_FILTER_${prop.nameUpper} = "${gfilter}_${prop.nameUpper}";
    public final static String EVENT_FILTER_${prop.nameUpper} = "${efilter}_${prop.nameUpper}";
    public final static String PERMS_FILTER_${prop.nameUpper} = "${pfilter}_${prop.nameUpper}";
#end

   /**
    * returns ${prop.name} . You should not modify this collection unless you
    * know what you are doing. Use the iterate method instead.
    *
##
#if($prop.ordered)
    * one-to-many List ${type.id}.${prop.name} (${prop.type})
    * Values are indexed by the column "index" on ${prop.type}
    */
    @javax.persistence.JoinColumn(name="${type.inverse($prop)}", nullable=false)
    @javax.persistence.OneToMany(fetch=javax.persistence.FetchType.LAZY, cascade={${cascadeEjb}})
    @org.hibernate.annotations.IndexColumn(name="${prop.inverse}_index", nullable=false)
#else
    * one-to-many Set ${type.id}.${prop.name} (${prop.type})
    */
    @javax.persistence.OneToMany(mappedBy="${prop.inverse}", fetch=javax.persistence.FetchType.LAZY, cascade={${cascadeEjb}})
#end
    @org.hibernate.annotations.Cascade({${cascadeHibCollection}})
##
##
#if(!$prop.actualTarget.global)
    @org.hibernate.annotations.Filters({
        @org.hibernate.annotations.Filter(name="OneGroupSecurityFilter"),
        @org.hibernate.annotations.Filter(name="AllGroupsSecurityFilter"),
#if($prop.type.equals("ome.model.acquisition.Detector"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT detector.id FROM detector*, image* WHERE " +
            "detector.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.DetectorSettings"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT detectorsettings.id FROM detectorsettings*, detector*, image* WHERE " +
            "detectorsettings.detector = detector.id AND detector.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.Dichroic"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT dichroic.id FROM dichroic*, image* WHERE " +
            "dichroic.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.Filter"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT filter.id FROM filter*, image* WHERE " +
            "filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.FilterSet"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT filterset.id FROM filterset*, image* WHERE " +
            "filterset.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.FilterSetEmissionFilterLink"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT link.id FROM filtersetemissionfilterlink AS link*, filter*, image* WHERE " +
            "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.FilterSetExcitationFilterLink"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT link.id FROM filtersetexcitationfilterlink AS link*, filter*, image* WHERE " +
            "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.ImagingEnvironment"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT imagingenvironment FROM image* WHERE " +
            "id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.Instrument"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT instrument FROM image* WHERE " +
            "id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.LightPath"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT logicalchannel.lightpath FROM logicalchannel*, channel*, pixels* WHERE " +
            "logicalchannel.id = channel.logicalchannel AND channel.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.LightPathEmissionFilterLink"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT link.id FROM lightpathemissionfilterlink AS link*, filter*, image* WHERE " +
            "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.LightPathExcitationFilterLink"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT link.id FROM lightpathexcitationfilterlink AS link*, filter*, image* WHERE " +
            "link.child = filter.id AND filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.LightSettings"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT lightsettings.id FROM lightsettings*, logicalchannel*, channel*, pixels* WHERE " +
            "lightsettings.id = logicalchannel.lightsourcesettings AND logicalchannel.id = channel.logicalchannel AND channel.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.LightSource"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT lightsource.id FROM lightsource*, image* WHERE " +
            "lightsource.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.Microscope"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT instrument.microscope FROM instrument*, image* WHERE " +
            "instrument.id = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.Objective"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT objective.id FROM objective*, image* WHERE " +
            "objective.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.ObjectiveSettings"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT objectivesettings FROM image* WHERE " +
            "id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.OTF"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT otf.id FROM otf*, image* WHERE " +
            "otf.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.StageLabel"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT stagelabel FROM image* WHERE " +
            "id IN (:images)))"),
#elseif($prop.type.equals("ome.model.acquisition.TransmittanceRange"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT filter.transmittancerange FROM filter*, image* WHERE " +
            "filter.instrument = image.instrument AND image.id IN (:images)))"),
#elseif($prop.type.equals("ome.model.core.Channel"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT channel.id FROM channel*, pixels* WHERE " +
            "channel.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.core.Image"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (:images))"),
#elseif($prop.type.equals("ome.model.core.LogicalChannel"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT channel.logicalchannel FROM channel*, pixels* WHERE " +
            "channel.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.core.OriginalFile"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT pofm.parent FROM pixelsoriginalfilemap AS pofm*, pixels* WHERE " +
            "pofm.child = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.core.Pixels"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "image IN (:images))"),
#elseif($prop.type.equals("ome.model.core.PixelsOriginalFileMap"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT pofm.id FROM pixelsoriginalfilemap AS pofm*, pixels* WHERE " +
            "pofm.child = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.core.PlaneInfo"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT planeinfo.id FROM planeinfo*, pixels* WHERE " +
            "planeinfo.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.ChannelBinding"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT channelbinding.id FROM channelbinding*, renderingdef*, pixels* WHERE " +
            "channelbinding.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.CodomainMapContext"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT codomainmapcontext.id FROM codomainmapcontext*, renderingdef*, pixels* WHERE " +
            "codomainmapcontext.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.ProjectionDef"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT projectiondef.id FROM projectiondef*, renderingdef*, pixels* WHERE " +
            "projectiondef.renderingdef = renderingdef.id AND renderingdef.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.QuantumDef"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT renderingdef.quantization FROM renderingdef*, pixels* WHERE " +
            "renderingdef.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.RenderingDef"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT renderingdef.id FROM renderingdef*, pixels* WHERE " +
            "renderingdef.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.display.Thumbnail"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT thumbnail.id FROM thumbnail*, pixels* WHERE " +
            "thumbnail.pixels = pixels.id AND pixels.image IN (:images)))"),
#elseif($prop.type.equals("ome.model.stats.StatsInfo"))
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0 OR " +
            "id IN (SELECT channel.statsinfo FROM channel*, pixels* WHERE " +
            "channel.pixels = pixels.id AND pixels.image IN (:images)))"),
#else
        @org.hibernate.annotations.Filter(name="SharingSecurityFilter", condition="(:is_admin = 1 OR :is_share = 0)"),
#end
        @org.hibernate.annotations.Filter(name=OWNER_FILTER_${prop.nameUpper}, condition=":ownerId = owner_id"),
        @org.hibernate.annotations.Filter(name=GROUP_FILTER_${prop.nameUpper}, condition=":groupId = group_id"),
        @org.hibernate.annotations.Filter(name=EVENT_FILTER_${prop.nameUpper}, condition=":eventId = event_id"),
        @org.hibernate.annotations.Filter(name=PERMS_FILTER_${prop.nameUpper}, condition=":permsStr = permissions")
    })
#end
    protected ${prop.fieldType} get${prop.nameCapped}() {
        $errorIfUnloaded
        return this.${prop.name};
    }

    /**
     * setter for ${prop.name} should be avoided. Does not fulfill normal semantics.
     */
    protected void set${prop.nameCapped}(${prop.fieldType} ${prop.name}) {
        $errorIfUnloaded
        this.${prop.name} = ${prop.name};
    }
##
##  A one-to-many property represents a set that is contained by this entity.
##  These methods represent our handling of Hibernate's "inverse" sets
##  which do not act as expected with regards to getters & setters.
##
##  To prevent users from making mistakes like not properly setting both 
##  sides of a relationship, these fields are hidden, and only accessible via
##  the following methods. Methods fall into several categories: 
##    (A) general   
##    (B) list-only
##    (C) link-based
##
##  (A) General one-to-many code
##  ----------------------------
##
    /**
     * returns the size of ${prop.name}. If less than zero, the Set was null.
     */
    public int sizeOf${prop.nameCapped}() {
        $errorIfUnloaded
        return this.${prop.name} == null ? -1 : this.${prop.name}.size();
    }

    /**
     * should be used rather than accessing the ${prop.name} set directly.
     * This method will never return null, but rather will return an instance
     * of {@link ome.util.EmptyIterator}. To test for a null collection,
     * see of {@link #sizeOf${prop.nameCapped}()} is less than zero.
     */
    public java.util.Iterator<${prop.type}> iterate${prop.nameCapped}() {
        $errorIfUnloaded
        if ( get${prop.nameCapped}() == null ) {
            return new ome.util.EmptyIterator<${prop.type}>();
        }
        return get${prop.nameCapped}().iterator(); // TODO should this be direct access
    }

    /**
     * Returns an unmodifiable collection-view
     */
    public java.util.Collection<${prop.type}> unmodifiable${prop.nameCapped}() {
        $errorIfUnloaded
        if ( get${prop.nameCapped}() == null ) {
            return java.util.Collections.emptyList();
        }
        return java.util.Collections.unmodifiableCollection( get${prop.nameCapped}() );
    }

    /**
     * takes a CBlock and calls the block once for each ${prop.type} while
     * collecting the results. If <code>block == null</code>, then the
     * iterator values themselves are collected. This method uses
     * {@link #iterate${prop.nameCapped}} internally and so will return a value
     * even if the underlying collection is null.
     */
    @SuppressWarnings("unchecked")
    public <E> java.util.List<E> collect${prop.nameCapped}(ome.util.CBlock<E> block) {

        $errorIfUnloaded

        java.util.List<E> result = new java.util.ArrayList<E>();
        java.util.Iterator<${prop.type}> it = iterate${prop.nameCapped}();
        while ( it.hasNext() ) {
            IObject obj = (IObject) it.next();
            if ( block != null ) {
                result.add( block.call( obj ) );
            } else {
                result.add( (E) obj );
            }
        }
        return result;
    }

    /**
     * use instead of set${prop.nameCapped} . Makes the necessary
     * call on ${prop.type} as well.
     */
    public void add${prop.fieldName}(${prop.type} target) {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().add( target );

## Copied to add${prop.shortType}Set(elements)
## Copied to set${prop.shortType}(index, element)
        // If this relationship is not ordered, then we will
        // "attempt" the setting even if it is loaded.
        if (target != null) {
#if(${prop.ordered})
            if (target.isLoaded()) {
#end
                target.set${prop.inverseCapped} ( this );
#if(${prop.ordered})
             }
#end
         }
    }

    /**
     * use like add${prop.shortType}.
     */
    public void add${prop.fieldName}Set(java.util.Collection<${prop.type}> targets) {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
           throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().addAll( targets );
        java.util.Iterator<${prop.type}> it = targets.iterator();
        while ( it.hasNext() ) {
            ${prop.type} target = it.next();

## Copied from add${prop.shortType}(target)
            // If this relationship is not ordered, then we will
            // "attempt" the setting even if it is loaded.
            if (target != null) {
#if(${prop.ordered})
                if (target.isLoaded()) {
#end
                    target.set${prop.inverseCapped} ( this );
#if(${prop.ordered})
                }
#end
            }
        }
    }

    /**
     * removes a single element from this set and makes the inverse call on ${prop.type}
     */
    public void remove${prop.fieldName}(${prop.type} target) {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().remove( target );
#if(${prop.ordered})
        if (target.isLoaded()) {
#end
            target.set${prop.inverseCapped} ( null );
#if(${prop.ordered})
        }
#end
    }

    /**
     * use like remove${prop.shortType}
     */
    public void remove${prop.fieldName}Set(java.util.Collection<${prop.type}> targets ) {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().removeAll( targets );
        java.util.Iterator<${prop.type}> it = targets.iterator();
        while ( it.hasNext() ) {
            ${prop.type} target = it.next();
#if(${prop.ordered})
            if (target.isLoaded()) {
#end
                target.set${prop.inverseCapped} ( null );
#if(${prop.ordered})
            }
#end
        }
    }

##
## The following methods are overwritten separately by the link code (C) below
## and therefore are omitted here if this is a link property.
##
#if(!${prop.isLink})
    /**
     * clears the set.
     */
    public void clear${prop.nameCapped}() {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().clear();
        java.util.Iterator<${prop.type}> it = iterate${prop.nameCapped}();
        while (it.hasNext()) {
            ${prop.type} target = it.next();
            target.set${prop.inverseCapped} ( null );
        }
    }
#end## End not link


##
##  (B) List-based code
##  -------------------
##
#if( ${prop.ordered} )
    /**
     * Gets the ${prop.type} at the given index.
     */
    public ${prop.type} get${prop.shortType}(int index)
    throws IndexOutOfBoundsException {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        return get${prop.nameCapped}().get(index);
    }

    /**
     * Sets the ${prop.type} at the given index. Adheres to the {@link java.util.List\#set(int, Object)}
     * contract. To extend the list, use {@link #add${prop.shortType}(${prop.shortType})}.
     * @see java.util.List\#set(int, Object)
     */
    public ${prop.type} set${prop.shortType}(int index, ${prop.type} element)
    throws IndexOutOfBoundsException {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }

        ${prop.type} old = get${prop.nameCapped}().set(index, element);

## Copied from add${prop.shortType}
        // If this relationship is not ordered, then we will
        // "attempt" the setting even if it is loaded.
        if (element != null) {
#if(${prop.ordered})
            if (element.isLoaded()) {
#end
                element.set${prop.inverseCapped} ( this );
#if(${prop.ordered})
            }
#end
        }

        return old;
    }

    /**
     * Gets the first element of ${prop.name} which can be interpreted as the
     * primary or default element in some situations. If there is not first
     * element, an {@link IndexOutOfBoundsException} is throws. This method
     * will also throw an {@link ApiUsageException} if the collection is
     * unloaded. See {@link #sizeOf${prop.nameCapped}()} for more information.
     */
    @javax.persistence.Transient
    public ${prop.type} getPrimary${prop.shortType}()
    throws IndexOutOfBoundsException {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        return get${prop.nameCapped}().get(0);
    }

    /**
     * Swaps the first element of ${prop.name} with the first instance of the
     * given element. If the given element is not in the list, an
     * {@link IndexOutOfBoundsException} will be thrown. Returns the swapped
     * element. This method
     * will also throw an {@link ApiUsageException} if the collection is
     * unloaded. See {@link #sizeOf${prop.nameCapped}()} for more information.
     */
    public ${prop.type} setPrimary${prop.shortType}(${prop.type} element)
    throws IndexOutOfBoundsException {
        $errorIfUnloaded
        if (get${prop.nameCapped}() == null) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        ${prop.fieldType} list = get${prop.nameCapped}();
        int index = list.indexOf(element);
        ${prop.type} old = list.get(0);
        list.set(index, old);
        list.set(0, element);
        return old;
    }
    
    
## TODO 
## ListIterator<${prop.type}> listIterator${prop.nameCapped}()
## public int indexOf(${prop.type} elt)
## public int lastIndexOf(${prop.type} elt) 
## List<${prop.type}> subList${prop.nameCapped}}(int fromIndex, int toIndex)
#end
##
##
##  (C) Link-based code
##  -------------------
##
##  These methods are like the set methods above, but help to completely
##  hide the link implementations.
##
#if( $prop.isLink )

    /**
     * Adds a ${LinkType} to ${prop.name} . This entails changing our ${prop.name} Set,
     * creating a new ${LinkType} and calling link${prop.targetName} on the ${prop.target}.
     */
    public ${LinkType} link${prop.targetName} (${prop.target} addition) {
        $errorIfUnloaded

        // Setup link
        ${LinkType} link = new ${LinkType}();
        link.link( ${order} );

        // Add it to us and possibly the other side.
        add${Link}( link, true );
        return link;
    }

    /**
     * Adds a ${LinkType} to ${prop.name}, allowing for recursion -- whether
     * or not add${prop.shortType} will be called on the addition <b>if it is loaded</b>
     */
    public void add${Link} (${LinkType} link, boolean bothSides) {
        $errorIfUnloaded
        if ( get${prop.nameCapped}() == null ) {
            throwNullCollectionException("${prop.nameCapped}");
        }
        get${prop.nameCapped}().add( link );

#if(${prop.bidirectional})
        if ( bothSides && link.${other}().isLoaded() ) {
            link.${other}().add${Link}( link, false );
        }
#end
    }

    /**
     * provides an iterator over the ${next} values of the ${prop.name}. Like
     * with most Collection iterators, modifications to the underlying collection
     * while iterating will result in an {@link java.util.ConcurrentModificationException}.
     * Use {@link #linked${prop.targetName}List()} instead.
     */
     public java.util.Iterator<${prop.target}> linked${prop.targetName}Iterator() {
        $errorIfUnloaded
        if ( get${prop.nameCapped}() == null ) {
            return new ome.util.EmptyIterator<${prop.target}>();
        }

        final java.util.Iterator<${LinkType}> it = get${prop.nameCapped}().iterator();
        return new java.util.Iterator<${prop.target}>() {

            @Override
            public boolean hasNext() {
                return it == null ? false : it.hasNext();
            }

            @Override
            public ${prop.target} next() {
                if ( it == null ) {
                    throw new java.util.NoSuchElementException( "${prop.name} is null; no elements." );
                }
                ${LinkType} link = (${LinkType}) it.next();
                return link.${other}();
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException("Cannot call remove on this iterator.");
            }

        };
    }

    /**
     * find all ${LinkType} which have the argument as their ${other}.
     */
    public java.util.Set<${LinkType}> find${Link}( ${prop.target} target ) {
        $errorIfUnloaded

        final java.util.Iterator<${LinkType}> it = iterate${prop.nameCapped}();
        final java.util.Set<${LinkType}> result = new java.util.HashSet<${LinkType}>();
        while ( it.hasNext() ) {
            ${LinkType} link = it.next();
            if ( link.${other}() == target ) {
                result.add( link );
            }
        }
        return result;
    }

    /**
     * produces a {@link java.util.List}-copy of the underlying collection. Unlike,
     * {@link #linked${prop.targetName}Iterator()}, while using the returned {@link java.util.List},
     * modifications can be made to the underlying collection without throwing
     * {@link java.util.ConcurrentModificationException}.
     */
    public java.util.List<${prop.target}> linked${prop.targetName}List() {
        $errorIfUnloaded

        java.util.Iterator<${prop.target}> it = linked${prop.targetName}Iterator();
        java.util.List<${prop.target}> list = new java.util.ArrayList<${prop.target}>();

        while ( it.hasNext() ) {
            list.add( it.next() );
        }
        return list;
    }

    /**
     * takes a CBlock and calls the block once for each ${prop.target} while
     * collecting the results. If <code>block == null</code>, then the
     * iterator values themselves are collected.
     */
    @SuppressWarnings("unchecked")
    public <E> java.util.List<E> eachLinked${prop.targetName}(ome.util.CBlock<E> block) {
        $errorIfUnloaded

        java.util.List<E> result = new java.util.ArrayList<E>();
        java.util.Iterator<${prop.target}> it = linked${prop.targetName}Iterator();
        while ( it.hasNext() ) {
            ${prop.target} obj = it.next();
            if ( block != null ) {
                result.add( block.call( obj ) );
            } else {
                result.add( (E) obj );
            }
        }
        return result;
    }

    /**
     * unlinks all ${prop.target} instances from this instance.
     */
    public void unlink${prop.targetName} (${prop.target} removal) {
        $errorIfUnloaded

        java.util.Set<${LinkType}> toRemove = find${Link}( removal );
        java.util.Iterator<${LinkType}> it = toRemove.iterator();
        while ( it.hasNext() ) {
            remove${Link}( it.next(), true );
        }
    }

    /**
     * removes the given ${Link} from ${prop.name}, allowing for recursion -- whether
     * or not the removal will call unlink${type.shortname} again <b>if loaded</b>.
     */
    public void remove${Link} (${LinkType} link, boolean bothSides) {
        $errorIfUnloaded

        if ( get${prop.nameCapped}() == null ) {
            throwNullCollectionException("${prop.nameCapped}");
        }

        get${prop.nameCapped}().remove( link );

#if(${prop.bidirectional})
        if ( bothSides && link.${other}().isLoaded() ) {
            link.${other}().remove${Link}( link, false );
        }
#end
    }

    /**
     * clears the set.
     */
    public void clear${prop.targetName}Links() {
        $errorIfUnloaded

        java.util.List<${LinkType}> list = new java.util.ArrayList<${LinkType}>( get${prop.nameCapped}() );
        for (${LinkType} link : list) {
            remove${Link}( link, true );
        }
    }

#if(!$prop.actualTarget.global)
    private java.util.Map<Long, Long> ${prop.name}CountPerOwner = null;

    protected void set${prop.nameCapped}CountPerOwner(java.util.Map<Long, Long> map) {
        this.${prop.name}CountPerOwner = map;
    }

    /* DISABLED:
    @org.hibernate.annotations.CollectionOfElements()
    @org.hibernate.annotations.MapKey(columns=@javax.persistence.Column(name="owner_id"))
    @javax.persistence.JoinTable(name="${type.countName($prop)}")
    */
    /**
     * If fetched, returns the count(*) of ${LinkType} that a user has.
     * If unfetched, returns null. No entries in the collection should be null.
     */
    @org.hibernate.annotations.Persister(impl = ome.util.CountCollectionPersister.class) // prevents deletes
#set($fkvalue = "FK_count_to_${type.shortname}_${prop.name}")
#set($fkvalue = "${type.fk($fkvalue)}")
    @org.hibernate.annotations.ForeignKey(name="${fkvalue}") // for code-gen
    @javax.persistence.ElementCollection // new collection annotation
    @javax.persistence.MapKeyColumn(name="owner_id", insertable=false, updatable=false, nullable=false)
    @javax.persistence.Column(name="count", insertable=false, updatable=false, nullable=false)
    @javax.persistence.CollectionTable(name="${type.countName($prop)}",
        joinColumns = @javax.persistence.JoinColumn(name="${type.shortname}_id"))
    public java.util.Map<Long, Long> get${prop.nameCapped}CountPerOwner() {
        return this.${prop.name}CountPerOwner;
    }
#end

#end## End isLink
#elseif($prop.foreignKey && $prop.type.startsWith("ome.model.units")) ## UNITS

   /**
    * Enum-mapped unit-based field ${type.id}.${prop.name} (${prop.type})
    */
    @javax.persistence.Embedded
#if($prop.type.startsWith("ome.model.units"))
     @javax.persistence.AttributeOverrides( {
            @javax.persistence.AttributeOverride(name="value", column = @javax.persistence.Column(name="${type.columnName($prop)}") ),
            @javax.persistence.AttributeOverride(name="unit", column = @javax.persistence.Column(name="${prop.name}Unit") )
    } )
#end
    public ${prop.fieldType} get${prop.nameCapped}() {
        $errorIfUnloaded
        return this.${prop.name};
    }

    public void set${prop.nameCapped}(${prop.fieldType} ${prop.name}) {
        $errorIfUnloaded
        this.${prop.name} = ${prop.name};
    }

#elseif($prop.foreignKey)## REGULAR M-1 ##################################TYPE
#set( $fetchType = "LAZY")
#if($prop.actualType.abstract)
#set( $fetchType = "EAGER" )
#end
   /**
    * Many-to-one field ${type.id}.${prop.name} (${prop.type})
    */
    @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.${fetchType}, cascade = {${cascadeEjb}}, targetEntity = ${prop.type}.class)
    @org.hibernate.annotations.Cascade({${cascadeHib}})
    @javax.persistence.JoinColumn(name="${type.propName($prop)}", nullable=${prop.nullable},
        unique=${prop.unique}, insertable=${prop.insert}, updatable=${prop.update})
#set($fkvalue = "FK${type.shortname.toLowerCase()}_${prop.name}_${prop.shortType.toLowerCase()}")
#set($fkvalue = "${type.fk($fkvalue)}")
    @org.hibernate.annotations.ForeignKey(name="${fkvalue}")
#if($type.isLink)## Need to convert from IObject to an implementation class
    @org.hibernate.annotations.Target(${prop.type}.class)
#end
    public ${prop.fieldType} get${prop.nameCapped}() {
        $errorIfUnloaded
        return this.${prop.name};
    }

    public void set${prop.nameCapped}(${prop.fieldType} ${prop.name}) {
        $errorIfUnloaded
        this.${prop.name} = ${prop.name};
    }
#else## REGULAR PROPERTY #################################################TYPE
   /**
    * Simple field ${type.id}.${prop.name} (${prop.type}) 
    */
    ${type.typeAnnotation($prop)}
#if($prop.type == "java.lang.String")
    @org.hibernate.search.annotations.Fields({
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.TOKENIZED),
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.TOKENIZED, 
            name="combined_fields")
    })
#elseif($prop.type == "java.lang.Integer" || $prop.type == "java.lang.Long" || $prop.type == "java.lang.Double" || $prop.type == "java.lang.Float")
    @org.hibernate.search.annotations.Fields({
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.UN_TOKENIZED),
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.UN_TOKENIZED,
            name="combined_fields")
    })
#elseif($prop.type == "java.sql.Timestamp")
    @org.hibernate.search.annotations.DateBridge(
        resolution=org.hibernate.search.annotations.Resolution.MINUTE)
    @org.hibernate.search.annotations.Fields({
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.UN_TOKENIZED),
        @org.hibernate.search.annotations.Field(index = org.hibernate.search.annotations.Index.UN_TOKENIZED,
            name = "combined_fields")
    })
#else
    // Not indexed
#end

    @javax.persistence.Column(columnDefinition="${prop.def}", nullable=${prop.nullable}, unique=${prop.unique}, name="${type.columnName($prop)}", updatable=${prop.update})
    public ${prop.fieldType} get${prop.nameCapped}() {
        $errorIfUnloaded
        return this.${prop.name};
    }

    public void set${prop.nameCapped}(${prop.fieldType} ${prop.name}) {
        $errorIfUnloaded
        this.${prop.name} = (${prop.type}) ${prop.name};
    }
#end######################################################################TYPE
#end########################################################################EACH

    @javax.persistence.Transient
    // TODO what does this look like with Validator
    @Override
    public boolean isValid() {
        return ome.util.Validator.validate(this).isValid();
    }

    @Override
    public ome.util.Validation validate() {
        return ome.util.Validator.validate(this);
    }

#if(!$type.abstract)
## TODO trying to return type and not superclass
## but javassist in hibernate has problems with covariant return types
## http://jboss.org/index.html?module=bb&op=viewtopic&t=83199
## http://www.jboss.org/index.html?module=bb&op=viewtopic&p=3950680
##
    public ${type.id} newInstance()
    {
        return new ${type.id}();
    }

    public ${type.id} proxy() {
        return new ${type.id}(this.id, false);
    }
#end

    @Override
    public boolean acceptFilter(ome.util.Filter __filter){
        try {
#if(!$type.superclass)
            this.id = (Long) __filter.filter(ID, this.id);
#end
#if(!${type.immutable} && !${type.superclass})
            this.version = (Integer) __filter.filter(VERSION, this.version);
#end
#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
            this.${prop.name}CountPerOwner = (java.util.Map<Long, Long>) __filter.filter(${prop.name.toUpperCase()}COUNTPEROWNER, this.${prop.name}CountPerOwner );
#end
            this.${prop.name} = (${prop.fieldType}) __filter.filter(${prop.name.toUpperCase()}, this.${prop.name} );
#end
#if($type.superclass)
            return super.acceptFilter(__filter);
#else
            return true;
#end
        } catch (RuntimeException re) {
                // ticket:1183 - Caused by Utils.trueClass(Annotation.class)
                if (re.getCause() instanceof InstantiationException) {
                        this.unload();
                        return true;
                } else {
                        throw re;
                }
        }
    }

    @Override
    public String toString(){
        String name = this.getClass().getName();
        StringBuilder sb = new StringBuilder(name.length() + 24);
        sb.append(name);
        if (this.id == null) {
            sb.append(":Hash_");
            sb.append(this.hashCode());
        } else {
            sb.append(":Id_");
            sb.append(this.id);
        }
        return sb.toString();
    }

    // FIELD-FIELDS

    @Override
    public java.util.Set<String> fields() {
        return ${type.id}.FIELDS;
    }

#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
    public final static String ${prop.name.toUpperCase()}COUNTPEROWNER = "${type.id}_${prop.name}CountPerOwner";
#end
    public final static String ${prop.nameUpper} = "${type.id}_${prop.name}";
#end

    public final static java.util.Set<String> FIELDS;
    static {
       java.util.Set<String> raw = new java.util.HashSet<String>();
#if(!$type.superclass)
       raw.add(ID);
#end
#if(!${type.immutable} && !${type.superclass})
       raw.add(VERSION);
#end
#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
       raw.add(${prop.name.toUpperCase()}COUNTPEROWNER);
#end
       raw.add(${prop.nameUpper});
#if($type.superclass)
       raw.addAll(${type.superclass}.FIELDS);
#end
#end
       FIELDS = java.util.Collections.unmodifiableSet( raw );
    }

    // Dynamic Getter/Setter
#if(!$type.superclass)
    // TODO is this searched for proxies?
    @javax.persistence.Transient
    protected java.util.Map<String, Object> _dynamicFields;

#end
    @Override
    public Object retrieve(String field) {
        if (field == null) {
            return null;
#if(!$type.superclass)
        } else if (field.equals(ID)) {
             return getId();
#end
#if(!${type.immutable} && !${type.superclass})
        } else if (field.equals(VERSION)) {
             return getVersion();
#end
#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
        } else if (field.equals(${prop.name.toUpperCase()}COUNTPEROWNER)) {
            return get${prop.nameCapped}CountPerOwner();
#end
        } else if (field.equals(${prop.nameUpper})) { // TODO use == here first??
            return get${prop.nameCapped}();
#end
        } else {
#if($type.superclass)
            return super.retrieve(field);
#else
            if (_dynamicFields != null) {
                return _dynamicFields.get(field);
            }
            return null;
#end
        }
    }

    @Override
    public void putAt(String field, Object value)
    {
        if (field == null) {
            return;
#if(!$type.superclass)
        } else if (field.equals(ID)) {
             setId((Long) value);
#end
#if(!${type.immutable} && !${type.superclass})
        } else if (field.equals(VERSION)) {
             setVersion((Integer) value);
#end
#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
        } else if (field.equals(${prop.name.toUpperCase()}COUNTPEROWNER)) {
            set${prop.nameCapped}CountPerOwner((java.util.Map<Long,Long>)value);
#end
        } else if (field.equals(${prop.nameUpper})) {
#if($prop.class.name == "ome.dsl.MapField")
            set${prop.nameCapped}((${prop.fieldType})value);
#else
            set${prop.nameCapped}((${prop.fieldType})value);
#end
#end
        } else {
#if($type.superclass)
            super.putAt(field,value);
#else
            if (_dynamicFields == null) {
                _dynamicFields = new java.util.HashMap<String, Object>();
            }
            _dynamicFields.put(field,value);
#end
        }
    }

#if(!$type.superclass)
    @javax.persistence.Transient
    protected boolean _loaded = true;

    @javax.persistence.Transient
    @Override
    public boolean isLoaded() {
        return _loaded;
    }

    protected void errorIfUnloaded() {
        throw new IllegalStateException("Object unloaded:"+this);
    }

#end

    @Override
    public void unload() {
        _loaded = false;
#if(!${type.immutable} && !${type.superclass})
        this.version = null;
#end
#foreach($prop in $type.classProperties)
#if($prop.one2Many && $prop.isLink && !$prop.actualTarget.global)
        this.${prop.name}CountPerOwner = null;
#end
        this.${prop.name} = null;
#end
#if($type.superclass)
        super.unload();
#end
    }

#if(!$type.superclass)
    @javax.persistence.Transient
    private transient ome.model.internal.GraphHolder _graphHolder;

    @javax.persistence.Transient
    @Override
    public final ome.model.internal.GraphHolder getGraphHolder()
    {
        if (_graphHolder == null)
            _graphHolder = new ome.model.internal.GraphHolder();
        return _graphHolder;
    }
#end

#*
    // SERIALIZATION
    /** the serialVersionID constant is set by objects.vm */
    private void readObject(java.io.ObjectInputStream s)
    throws java.io.IOException, ClassNotFoundException
    {
        s.defaultReadObject();
    }
*#

    protected void throwNullCollectionException(String propertyName) {
        throw new ApiUsageException(
            "Error updating collection:" + propertyName +"\n"+
            "Collection is currently null. This can be seen\n"+
            "by testing \"sizeOf"+ propertyName +" < 0\". This implies\n"+
            "that this collection was unloaded. Please refresh this object\n"+
            "in order to update this collection.\n"
            );
    }

#######################################################
##
## Link Type Property code
##
#if( $type.class.name.equals("ome.dsl.LinkType"))
#foreach( $prop in $type.classProperties)
#if($prop.class.name == "ome.dsl.LinkParent")
#set( $parent = ${prop.type} )
#elseif($prop.class.name == "ome.dsl.LinkChild")
#set( $child = ${prop.type} )
#end
#end
    public void link($parent parent, $child child) {
        setParent( parent );
        setChild( child );
    }

    public $parent parent() {
        return ($parent) getParent();
    }

    public $child child() {
        return ($child) getChild();
    }

#end
##
#######################################################

#if(!$type.superclass)
    public static class Details extends ome.model.internal.Details {

        private final static long serialVersionUID = 0000000030000020301L;

        public Details() {
            super();
        }

        public Details(Object[] contexts) {
            super(contexts);
        }

        @Override
        public ome.model.internal.Details newInstance() {
            return new Details(contexts);
        }

        @Override
        @javax.persistence.Embedded
        public ome.model.internal.Permissions getPermissions() {
            return super.getPermissions();
        }

        @Override
        @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, cascade = {${cascadeEjb}})
        @org.hibernate.annotations.Cascade({${cascadeHib}})
        @javax.persistence.JoinColumn(name = "external_id", nullable = true, unique = true, insertable = true, updatable = true)
#set($fkvalue = "FK${type.table}_external_id_externalinfo")
#set($fkvalue = "${type.fk($fkvalue)}")
        @org.hibernate.annotations.ForeignKey(name = "${fkvalue}")
        public ome.model.meta.ExternalInfo getExternalInfo() {
            return super.getExternalInfo();
        }

#if(!$type.global)
        @Override
        @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, cascade = {${cascadeEjb}})
        @org.hibernate.annotations.Cascade({${cascadeHib}})
        @javax.persistence.JoinColumn(name = "owner_id", nullable = false, unique = false, insertable = true, updatable = true)
#set($fkvalue = "FK${type.table}_owner_id_experimenter")
#set($fkvalue = "${type.fk($fkvalue)}")
        @org.hibernate.annotations.ForeignKey(name = "${fkvalue}")
        public ome.model.meta.Experimenter getOwner() {
            return super.getOwner();
        }

        @Override
        @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, cascade = {${cascadeEjb}})
        @org.hibernate.annotations.Cascade({${cascadeHib}})
        @javax.persistence.JoinColumn(name = "creation_id", nullable = false, unique = false, insertable = true, updatable = false)
#set($fkvalue = "FK${type.table}_creation_id_event")
#set($fkvalue = "${type.fk($fkvalue)}")
        @org.hibernate.annotations.ForeignKey(name = "${fkvalue}")
        public ome.model.meta.Event getCreationEvent() {
            return super.getCreationEvent();
        }

        @Override
        @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, cascade = {${cascadeEjb}})
        @org.hibernate.annotations.Cascade({${cascadeHib}})
        @javax.persistence.JoinColumn(name = "group_id", nullable = false, unique = false, insertable = true, updatable = true)
#set($fkvalue = "FK${type.table}_group_id_experimentergroup")
#set($fkvalue = "${type.fk($fkvalue)}")
        @org.hibernate.annotations.ForeignKey(name = "${fkvalue}")
        public ome.model.meta.ExperimenterGroup getGroup() {
            return super.getGroup();
        }

#if(!$type.immutable)
        @Override
        @javax.persistence.ManyToOne(fetch = javax.persistence.FetchType.LAZY, cascade = {${cascadeEjb}})
        @org.hibernate.annotations.Cascade({${cascadeHib}})
        @javax.persistence.JoinColumn(name = "update_id", nullable = false, unique = false, insertable = true, updatable = true)
#set($fkvalue = "FK${type.table}_update_id_event")
#set($fkvalue = "${type.fk($fkvalue)}")
        @org.hibernate.annotations.ForeignKey(name = "${fkvalue}")
        public ome.model.meta.Event getUpdateEvent() {
            return super.getUpdateEvent();
        }
#else
       /**
        * Overrides {@link ome.model.internal.Details#getUpdateEvent()} to
        * always return null.
        */
        @Override
        @javax.persistence.Transient
        public ome.model.meta.Event getUpdateEvent() {
            return null;
        }

       /**
        * Overrides {@link ome.model.internal.Details#setUpdateEvent(ome.model.meta.Event)} to
        * do nothing.
        */
        @Override
        public void setUpdateEvent(ome.model.meta.Event event) {
            // do nothing
        }
       
#end
#end

#if($extra)
$extra
#end

    }
#end
}
