<?xml version="1.0" encoding="UTF-8"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Child build file to create the app deliverables.
 * This file is only meant to be used as an imported file within the
 * OMERO.insight master build file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<project name="dist" default="usage">

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Fail at import time if the external properties this child depends upon
   * have not been defined.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <checkdef prop="build.dir"/>
  <checkdef prop="base.launch.dir"/>
  <checkdef prop="base.lib.dir"/>
  <checkdef prop="app.compiled.dir"/>
  <checkdef prop="app.config.dir"/>
  <checkdef prop="app.lib.dir"/>
  <checkdef prop="app.mainclass"/>
  <checkdef ref="app.config"/>
  <!-- <checkdef ref="app.libs"/> -->
<checkdef prop="app.compiled.util.dir"/>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Settings to create the deliverables:
   *   + dist.dir: The distribution directory, where deliverables are created.
   *   + dist.jar.file: The name of the file in which the whole app will be
   *           packaged.  This file will be output under ${dist.dir}.
   *   + dist.bundle.name: The name of the distribution bundle.  This is a
   *           compressed file containing the app jar, all required libs,
   *           launch scripts, and install instructions.
   *   + dist.bundle.version: The version of the distribution bundle.  Together
   *           with the bundle name, it forms the name of the default bundle
   *           file as <name>-<version>.zip.  (The extension name is dictated
   *           by the compression algorithm used.)  Other platform-specific
   *           bundles follow the same naming convention, except they add a
   *           platform-specific postfix, like <name>-<version>-mac.zip for
   *           the Mac OS X bundle.
   *   + dist.launch.scripts: All launch scripts to go in the default bundle.
   *   + dist.installfile: The install instructions to include in the
   *           default bundle.
   *   + dist.app.lib.dir.name: The name of the ${app.lib.dir}.
   *   + dist.app.config.dir.name: The name of the ${app.config.dir}.
   *   + dist.osx.icon: The icon to use for the Mac OS X client.
   *   + dist.osx.stub: The stub file for the Mac OS X client.
   *   + dist.osx.stub.name: The name of the above file.
   *   + dist.osx.installfile: The install instructions to include in the
   *           Mac OS X bundle.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <if>
      <isset property="dist.dir"/>
      <then>
          <fail>ERROR: dist.dir is currently set!

        This most likely occurred because dist.dir was set on the top-level
        build:  ./build.py -Ddist.dir=/tmp/example

        This no longer works with the insight build. Instead, set dist.dir
        in the etc/local.properties file.</fail>
      </then>
  </if>
  <property environment="dist.environment"/>
  <property name="distInsight.name" value="OMERO.insight"/>
  <property name="dist.dir" location="${build.dir}/dist"/>
  <property name="dist.jar.file" value="omero.insight.jar"/>
   <property name="dist.jar.ij.file" value="omero_ij.jar"/>
  <property name="dist.bundle.name" value="OMERO.insight"/>
  <property name="dist.bundle.ij.name" value="OMERO.insight-ij"/>
  <fileset id="dist.launch.scripts" dir="${base.launch.dir}">
    <include name="importer-cli"/>
    <include name="*.sh"/>
    <include name="*.bat"/>
  </fileset>
  <property name="dist.installfile"
            location="${base.launch.dir}/INSTALL.txt"/>
  <basename property="dist.app.lib.dir.name" file="${app.lib.dir}"/>
  <basename property="dist.app.config.dir.name" file="${app.config.dir}"/>
  <property name="dist.vmparameters" value="${app.vmparameters}"/>
  <property name="dist.osx.icon"
            location="${base.launch.dir}/osx/omeroinsight.icns"/>
  <property name="dist.osx.stub"
            location="${base.launch.dir}/osx/JavaApplicationStub"/>
  <property name="dist.osx.stub.name" value="JavaApplicationStub"/>
  <property name="dist.osx.installfile"
            location="${base.launch.dir}/osx/INSTALL"/>
  <property name="dist.exe4j.home" value="/opt/exe4j"/>
  <property name="distInsight.win.exename" value="OMERO.insight"/>
  <property name="distInsight.win64.exename" value="${distInsight.win.exename}_64"/>
  <property name="distInsight.win.icon"
            location="${base.launch.dir}/win/omeroinsight.ico"/>
  <property name="dist.util.name" value="omero-clients-util"/>
  <property name="dist.util.dir" location="${dist.dir}/util"/>
  <!-- editor -->
  <property name="distEditor.name" value="OMERO.editor"/>
  <property name="distEditor.osx.icon"
	            location="${base.launch.dir}/osx/editorIcon.icns"/>
  <property name="distEditor.bundle.name" value="OMERO.editor"/>
  <property name="distEditor.win.exename" value="OMERO.editor"/>
  <property name="distEditor.win64.exename" value="${distEditor.win.exename}_64"/>
  <property name="distEditor.win.icon"
            location="${base.launch.dir}/win/omeroeditor.ico"/>
  <!-- importer -->
  <property name="distImporter.name" value="OMERO.importer"/>
  <property name="distImporter.osx.icon"
		            location="${base.launch.dir}/osx/omeroImporterLogo.icns"/>
  <property name="distImporter.bundle.name" value="OMERO.importer"/>
  <property name="distImporter.win.exename" value="OMERO.importer"/>
  <property name="distImporter.win64.exename" value="${distImporter.win.exename}_64"/>
  <property name="distImporter.win.icon"
	            location="${base.launch.dir}/win/omeroImporterLogo.ico"/>
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * Verify the app is good for distribution and create ${dist.dir}.
    * First the whole app and test dirs are removed and then new ones are
    * re-generated with all app and test code.  Tests are run and if a failure
    * occurs, the build is halted.  This way, the app can't be released unless
    * all tests pass.  ,test
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="dist-init" depends="app.clean,test.clean, test">
    <mkdir dir="${dist.dir}"/>
    <property name="main-dist-prefix" value="${dist.bundle.name}-${dist.bundle.version}"/>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * Checks to see if EXE4J is available for Windows build targets.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="exe4j-check-exists">
    <condition property="dist.exe4j.exists">
      <available file="${dist.exe4j.home}/bin/ant.jar"/>
    </condition>
    <!-- Touch the zip files for ivy -->
    <zip destfile="${dist.dir}/${main-dist-prefix}-win.zip">
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
    <zip destfile="${dist.dir}/${main-dist-prefix}-win-openGL.zip">
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
    <zip destfile="${dist.dir}/${main-dist-prefix}-win64-openGL.zip">
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
    <zip destfile="${dist.dir}/${distEditor.bundle.name}-${dist.bundle.version}-win.zip">
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
    <zip destfile="${dist.dir}/${distImporter.bundle.name}-${dist.bundle.version}-win.zip">
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
  </target>

  <target name="exe4j-echo-on-missing" unless="dist.exe4j.exists">
    <echo message="exe4j not present at ${dist.exe4j.home}/bin/ant.jar, skipping exe4j tasks."/>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * Prepares the EXE4J Ant plug-in for Windows build targets.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="exe4j-init" depends="exe4j-check-exists,exe4j-echo-on-missing" if="dist.exe4j.exists">
    <echo message="exe4j present at ${dist.exe4j.home}, preparing exe4j tasks."/>
      <taskdef name="exe4j"
               classpath="${dist.exe4j.home}/bin/ant.jar"
               classname="com.exe4j.Exe4JTask"/>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Package the whole app into the ${dist.jar.file} under ${dist.dir}.
   * The whole content of the ${app.compiled.dir} is jar'ed and a suitable
   * manifest is generated that links all the required libraries.  That is
   * all libraries defined by app.libs.  The path of each library file is
   * specified in the Class-Path header to be relative to the ${app.lib.dir}.
   * For example, an xxx.jar shows up in the header as {lib}/xxx.jar, where
   * {lib} is the name of the ${app.lib.dir}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="jar" depends="dist-init">
    <pathconvert property="dist.jar.manifest.cp"
                 pathsep=" "
                 dirsep="/"
                 refid="app.libs">
      <map from="${base.runtimelib.dir}" to="${dist.app.lib.dir.name}"/>
    </pathconvert>
    <basename property="dist.jar.app.config.base" file="${app.config.dir}"/>
    <dirname property="dist.jar.app.config.dir" file="${app.config.dir}"/>
    <jar destfile="${dist.dir}/${dist.jar.file}">
      <fileset dir="${app.compiled.dir}"/>
      <fileset dir="${dist.jar.app.config.dir}" includes="${dist.jar.app.config.base}/**"/>
      <manifest>
        <attribute name="Application-Name" value="${distInsight.name}"/>
        <attribute name="Codebase" value="*"/>
        <attribute name="Created-By" value="OMERO Development Team"/>
        <attribute name="Class-Path" value="${dist.jar.manifest.cp}"/>
        <attribute name="Main-Class" value="${app.mainclass}"/>
        <attribute name="Permissions" value="all-permissions"/>
        <attribute name="Trusted-Only" value="true"/>
      </manifest>
    </jar>
  </target>
  <target name="jar-ij" depends="dist-init">
    <pathconvert property="dist.jar.manifest.cp"
                 pathsep=" "
                 dirsep="/"
                 refid="app.libs">
      <map from="${base.lib.dir}" to="${dist.app.lib.dir.name}"/>
    </pathconvert>
    <jar destfile="${dist.dir}/${dist.jar.ij.file}">
      <fileset dir="${app.compiled.dir}"/>
      <manifest>
        <attribute name="Created-By" value="OMERO Development Team"/>
        <attribute name="Class-Path" value="${dist.jar.manifest.cp}"/>
        <attribute name="Main-Class" value="${app.mainclass.ij}"/>
      </manifest>
    </jar>
  </target>
  <target name="jar-util" depends="dist-init">
     <pathconvert property="dist.jar.manifest.cp"
        pathsep=" "
	                 dirsep="/"
	                 refid="app.libs">
	    <map from="${base.runtimelib.dir}" to="${dist.app.lib.dir.name}"/>
	    </pathconvert>
	    <jar destfile="${dist.dir}/${dist.util.name}-${dist.bundle.version}.jar">
	      <fileset dir="${app.compiled.util.dir}"/>
	    	<fileset dir="${base.runtimelib.dir}" includes="${ivy.module}.jar"/>
	    	<manifest>
	    	        <attribute name="Created-By" value="OMERO Development Team"/>
	    	      </manifest>
	    </jar>
  </target>
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Creates the default distribution bundle under ${dist.dir}.
   * This is a zip file whose name is set to
   * ${dist.bundle.name}-${dist.bundle.version}.zip
   * and whose contents are:
   *   + A config dir, containing all the app.config files.  The dir name is
   *     set to the name of the ${app.config.dir}.
   *   + A lib dir, containing all the app.libs files.  The dir name is set
   *     to the name of the ${app.lib.dir}.
   *   + The app jar file, ${dist.jar.file}.
   *   + The launch scripts, dist.launch.scripts.
   *   + The install instructions, ${dist.installfile}.
   *   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="dist"
          depends="jar, jar-util, jar-ij, dist-osx-openGL, dist-osx, dist-win,
  	dist-win-openGL,dist-win64-openGL,distEditor-osx, distEditor-win, dist-ij,
  	distImporter-osx, distImporter-win"
          description="Build and package the app for distribution.">

    <!-- Main zip -->
    <zip destfile="${dist.dir}/${main-dist-prefix}.zip">
      <zipfileset dir="${app.config.dir}" prefix="${main-dist-prefix}/${dist.app.config.dir.name}"/>
      <zipfileset refid="app.libs" prefix="${main-dist-prefix}/${dist.app.lib.dir.name}"/>
      <zipfileset dir="${dist.dir}" prefix="${main-dist-prefix}" includes="${dist.jar.file}"/>
      <zipfileset refid="dist.launch.scripts" prefix="${main-dist-prefix}" filemode="775"/>
      <zipfileset file="${dist.installfile}" prefix="${main-dist-prefix}"/>
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-prefix}/LICENSE"/>
    </zip>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Creates the default distribution bundle under ${dist.dir}.
   * This is a zip file whose name is set to
   * ${dist.bundle.name}-${dist.bundle.version}.zip
   * and whose contents are:
   *   + A config dir, containing all the app.config files.  The dir name is
   *     set to the name of the ${app.config.dir}.
   *   + A lib dir, containing all the app.libs files.  The dir name is set
   *     to the name of the ${app.lib.dir}.
   *   + The app jar file, ${dist.jar.file}.
   *   + The launch scripts, dist.launch.scripts.
   *   + The install instructions, ${dist.installfile}.
   *   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="dist-ij"
          depends="jar-ij"
          description="Build and package the app for distribution.">
  	<property name="main-dist-ij-prefix" value="${dist.bundle.ij.name}-${dist.bundle.version}"/>
    <zip destfile="${dist.dir}/${main-dist-ij-prefix}.zip">
      <zipfileset dir="${app.config.dir}" prefix="${main-dist-ij-prefix}/${dist.app.config.dir.name}"/>
      <zipfileset refid="app.libs.no-bioformats-no-logback" prefix="${main-dist-ij-prefix}/${dist.app.lib.dir.name}"/>
      <zipfileset dir="${dist.dir}" prefix="${main-dist-ij-prefix}" includes="${dist.jar.ij.file}"/>
      <zipfileset file="${base.licensefile}" fullpath="${main-dist-ij-prefix}/LICENSE"/>
    </zip>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Creates Windows executables via exe4j.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <macrodef name="make-windows-executables">
    <attribute name="type"/>
    <attribute name="do-64-bit" default="true"/>
    <attribute name="do-32-bit" default="true"/>
    <sequential>
      <if>
        <equals arg1="@{do-32-bit}" arg2="true"/>
        <then>
          <copy tofile="${build.dir}/@{type}.exe4j"
            file="build/@{type}_template.exe4j"
                overwrite="true">
            <filterset>
              <filter token="MAIN_CLASS" value="${app.mainclass}"/>
              <filter token="IS_64_BIT" value="false"/>
              <!-- exe4j exe names have to be relative paths for some reason. Please
                   leave the "app" directory prefix and do not replace with
                   ${app.dir} or you will get strange errors. -->
              <filter token="EXE_NAME" value="app/${dist@{type}.win.exename}"/>
              <filter token="APP_NAME" value="${dist@{type}.name}"/>
              <filter token="ICON_FILE" value="${dist@{type}.win.icon}"/>
              <filter token="VM_PARAMETERS" value="${dist.vmparameters}"/>
            </filterset>
          </copy>
          <exe4j projectfile="${build.dir}/@{type}.exe4j"/>
        </then>
      </if>

      <if>
        <equals arg1="@{do-64-bit}" arg2="true"/>
        <then>
          <copy tofile="${build.dir}/@{type}_64.exe4j"
            file="build/@{type}_template.exe4j"
                overwrite="true">
            <filterset>
              <filter token="MAIN_CLASS" value="${app.mainclass}"/>
              <filter token="IS_64_BIT" value="true"/>
              <!-- exe4j exe names have to be relative paths for some reason. Please
                   leave the "app" directory prefix and do not replace with
                   ${app.dir} or you will get strange errors. -->
              <filter token="EXE_NAME" value="app/${dist@{type}.win64.exename}"/>
              <filter token="APP_NAME" value="${dist@{type}.name}"/>
              <filter token="ICON_FILE" value="${dist@{type}.win.icon}"/>
              <filter token="VM_PARAMETERS" value="${dist.vmparameters}"/>
            </filterset>
          </copy>
          <exe4j projectfile="${build.dir}/@{type}_64.exe4j"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Creates the Windows distribution bundle under ${dist.dir}.
   * This is a zip file whose name is set to
   * ${dist.bundle.name}-${dist.bundle.version}-win.zip
   * and whose contents are:
   *   + A config dir, containing all the app.config files.  The dir name is
   *     set to the name of the ${app.config.dir}.
   *   + The OMERO.insight application.  That is, the .app dir embedding the app
   *     jar file, all the the app.libs files, and Windows exe.
   *   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="dist-win" depends="jar,exe4j-init"
	          if="dist.exe4j.exists"
	          description="Build and package the app for Windows distribution.">
      <make-windows-executables type="Insight"/>
	    <property name="dist.zip.prefix.win"
	              value="${dist.bundle.name}-${dist.bundle.version}-win"/>
	    <zip destfile="${dist.dir}/${dist.zip.prefix.win}.zip">
	      <zipfileset prefix="${dist.zip.prefix.win}/${dist.app.config.dir.name}"
	                  dir="${app.config.dir}"/>
	      <zipfileset prefix="${dist.zip.prefix.win}/libs" dir="${app.lib.dir}"
	                  includes="*"/>
	      <zipfileset prefix="${dist.zip.prefix.win}"
	                  file="${app.dir}/${distInsight.win.exename}.exe"/>
	      <zipfileset prefix="${dist.zip.prefix.win}"
	                  file="${app.dir}/${distInsight.win64.exename}.exe"/>
	      <zipfileset file="${base.licensefile}"
	                  fullpath="${dist.zip.prefix.win}/LICENSE"/>
	      <zipfileset prefix="${dist.zip.prefix.win}" dir="${dist.dir}"
	                  includes="${dist.jar.file}"/>
	    </zip>
	  </target>

  <target name="dist-win-openGL" depends="jar,exe4j-init"
          if="dist.exe4j.exists"
          description="Build and package the app for Windows distribution with OpenGL support.">
    <make-windows-executables type="Insight" do-64-bit="false"/>
    <copy file="${app.config.dir}/imviewer.xml"
      tofile="${dist.dir}/opengl-imviewer.xml"/>
    <replace file="${dist.dir}/opengl-imviewer.xml"
        token='entry name="/library/opengl" type="boolean"&gt;false&lt;/entry'
        value='entry name="/library/opengl" type="boolean"&gt;true&lt;/entry'>
    </replace>
    <property name="dist.zip.prefix.win.openGL"
              value="${dist.bundle.name}-${dist.bundle.version}-win-openGL"/>
    <zip destfile=
           "${dist.dir}/${dist.zip.prefix.win.openGL}.zip">
      <zipfileset prefix="${dist.zip.prefix.win.openGL}/${dist.app.config.dir.name}"
                  dir="${app.config.dir}"
                  includes="**"
                  excludes="imviewer.xml"/>
      <zipfileset prefix="${dist.zip.prefix.win.openGL}/libs" dir="${app.lib.dir}"
                  includes="*"/>
      <zipfileset prefix="${dist.zip.prefix.win.openGL}"
                  file="${app.dir}/${distInsight.win.exename}.exe"/>
      <zipfileset fullpath="${dist.zip.prefix.win.openGL}/LICENSE"
                  file="${base.licensefile}"/>
      <zipfileset prefix="${dist.zip.prefix.win.openGL}" dir="${dist.dir}"
                  includes="${dist.jar.file}"/>
      <zipfileset prefix="${dist.zip.prefix.win.openGL}/libs"
                  dir="${native.lib.dir}/win-native" includes="*"/>
      <zipfileset file="${dist.dir}/opengl-imviewer.xml"
                  fullpath="${dist.zip.prefix.win.openGL}/${dist.app.config.dir.name}/imviewer.xml"/>
    </zip>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	* Creates the Windows distribution bundle under ${dist.dir}.
	* This is a zip file whose name is set to
	* ${dist.bundle.name}-${dist.bundle.version}-win.zip
	* and whose contents are:
	*   + A config dir, containing all the app.config files.  The dir name is
	*     set to the name of the ${app.config.dir}.
	*   + The OMERO.insight application.  That is, the .app dir embedding the app
	*     jar file, all the the app.libs files, and Windows exe.
	*   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
   <target name="dist-win64-openGL" depends="jar,exe4j-init"
	          if="dist.exe4j.exists"
	          description="Build and package the app for Windows 64 distribution with OpenGL support.">
      <make-windows-executables type="Insight" do-32-bit="false"/>
      <copy file="${app.config.dir}/imviewer.xml"
        tofile="${dist.dir}/opengl-imviewer.xml"/>
      <replace file="${dist.dir}/opengl-imviewer.xml"
          token='entry name="/library/opengl" type="boolean"&gt;false&lt;/entry'
          value='entry name="/library/opengl" type="boolean"&gt;true&lt;/entry'>
      </replace>
	    <property name="dist.zip.prefix.win64.openGL"
                value="${dist.bundle.name}-${dist.bundle.version}-win64-openGL"/>
	    <zip destfile="${dist.dir}/${dist.zip.prefix.win64.openGL}.zip">
	      <zipfileset prefix="${dist.zip.prefix.win64.openGL}/${dist.app.config.dir.name}"
                    dir="${app.config.dir}"
                    includes="**"
                    excludes="imviewer.xml"/>
	      <zipfileset prefix="${dist.zip.prefix.win64.openGL}/libs" dir="${app.lib.dir}"
	                  includes="*"/>
	      <zipfileset prefix="${dist.zip.prefix.win64.openGL}"
	                  file="${app.dir}/${distInsight.win64.exename}.exe"/>
	      <zipfileset file="${base.licensefile}"
	                  fullpath="${dist.zip.prefix.win64.openGL}/LICENSE"/>
	      <zipfileset prefix="${dist.zip.prefix.win64.openGL}" dir="${dist.dir}"
	                  includes="${dist.jar.file}"/>
	      <zipfileset prefix="${dist.zip.prefix.win64.openGL}/libs"
	                  dir="${native.lib.dir}/win64-native"
	                  includes="*"/>
        <zipfileset file="${dist.dir}/opengl-imviewer.xml"
                    fullpath="${dist.zip.prefix.win64.openGL}/${dist.app.config.dir.name}/imviewer.xml"/>
	    </zip>
	  </target>
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Creates the Mac OS X distribution bundle under ${dist.dir}.
   * This is a zip file whose name is set to
   * ${dist.bundle.name}-${dist.bundle.version}-mac.zip
   * and whose contents are:
   *   + A config dir, containing all the app.config files.  The dir name is
   *     set to the name of the ${app.config.dir}.
   *   + The OMERO.insight application.  That is, the .app dir embedding the app
   *     jar file, all the the app.libs files, and Mac OS X specific config.
   *   + The install instructions, ${dist.osx.installfile}.
   *   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="dist-osx"
          depends="jar"
          description="Build and package the app for OS X distribution.">
    <delete dir="${dist.dir}/OMERO.insight.app"/>
    <jarbundler dir="${dist.dir}"
                name="${distInsight.name}"
                mainclass="${app.mainclass}"
                version="${dist.bundle.version}"
                infostring="${distInsight.name} Java Client, ${dist.bundle.version}"
                aboutmenuname="${distInsight.name}"
                screenmenu="true"
                icon="${dist.osx.icon}"
                stubfile="${dist.osx.stub}"
               	jvmversion="1.6+"
                vmoptions="${dist.vmparameters}">
      <jarfileset refid="app.libs"/>
      <jarfileset dir="${dist.dir}" includes="${dist.jar.file}"/>
    </jarbundler>
    <property name="dist.zip.prefix.osx"
              value="${dist.bundle.name}-${dist.bundle.version}-mac"/>
    <zip destfile="${dist.dir}/${dist.zip.prefix.osx}.zip">
      <zipfileset refid="dist.launch.scripts" prefix="${dist.zip.prefix.osx}" filemode="775"/>
      <zipfileset prefix="${dist.zip.prefix.osx}/${dist.app.config.dir.name}"
                  dir="${app.config.dir}"/>
      <zipfileset prefix="${dist.zip.prefix.osx}" dir="${dist.dir}"
               includes="OMERO.insight.app/**"
               excludes="**/${dist.osx.stub.name}"/>
      <zipfileset file="${dist.osx.stub}"
                  fullpath="${dist.zip.prefix.osx}/OMERO.insight.app/Contents/MacOS/${dist.osx.stub.name}"
                  filemode="775"/>
      <zipfileset prefix="${dist.zip.prefix.osx}" file="${dist.osx.installfile}"/>
      <zipfileset file="${base.licensefile}"
                  fullpath="${dist.zip.prefix.osx}/LICENSE"/>
    </zip>
  </target>

  <target name="dist-osx-openGL"
          depends="jar"
          description="Build and package the app for OS X distribution with OpenGL support.">
    <delete dir="${dist.dir}/OMERO.insight.app"/>
    <jarbundler dir="${dist.dir}"
                name="${distInsight.name}"
                mainclass="${app.mainclass}"
                version="${dist.bundle.version}"
                infostring="${distInsight.name} Java Client, ${dist.bundle.version}"
                aboutmenuname="${distInsight.name}"
                screenmenu="true"
                icon="${dist.osx.icon}"
                stubfile="${dist.osx.stub}"
                jvmversion="1.6+"
                vmoptions="${dist.vmparameters}">
      <jarfileset refid="app.libs"/>
      <javaproperty name="java.library.path" value="$JAVAROOT"/>
      <jarfileset dir="${dist.dir}" includes="${dist.jar.file}"/>
      <jarfileset dir="${native.lib.dir}/osx-native" includes="*"/>
    </jarbundler>
    <copy file="${app.config.dir}/imviewer.xml"
      tofile="${dist.dir}/opengl-imviewer.xml"/>
    <replace file="${dist.dir}/opengl-imviewer.xml"
        token='entry name="/library/opengl" type="boolean"&gt;false&lt;/entry'
        value='entry name="/library/opengl" type="boolean"&gt;true&lt;/entry'>
    </replace>

    <property name="dist.zip.prefix.osx.openGL"
              value="${dist.bundle.name}-${dist.bundle.version}-mac-openGL"/>
    <zip destfile="${dist.dir}/${dist.zip.prefix.osx.openGL}.zip">
      <zipfileset prefix="${dist.zip.prefix.osx.openGL}/${dist.app.config.dir.name}"
                  dir="${app.config.dir}"
                  includes="**"
                  excludes="imviewer.xml"/>
      <zipfileset prefix="${dist.zip.prefix.osx.openGL}" dir="${dist.dir}"
               includes="OMERO.insight.app/**"
               excludes="**/${dist.osx.stub.name}"/>
      <zipfileset file="${dist.osx.stub}"
                  fullpath="${dist.zip.prefix.osx.openGL}/OMERO.insight.app/Contents/MacOS/${dist.osx.stub.name}"
                  filemode="775"/>
      <zipfileset prefix="${dist.zip.prefix.osx.openGL}" file="${dist.osx.installfile}"/>
      <zipfileset file="${base.licensefile}"
                  fullpath="${dist.zip.prefix.osx.openGL}/LICENSE"/>
      <zipfileset file="${dist.dir}/opengl-imviewer.xml"
                  fullpath="${dist.zip.prefix.osx.openGL}/${dist.app.config.dir.name}/imviewer.xml"/>
    </zip>
  </target>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * Creates the Windows distribution bundle under ${dist.dir}.
     * This is a zip file whose name is set to
     * ${dist.bundle.name}-${dist.bundle.version}-win.zip
     * and whose contents are:
     *   + A config dir, containing all the app.config files.  The dir name is
     *     set to the name of the ${app.config.dir}.
     *   + The OMERO.insight application.  That is, the .app dir embedding the app
     *     jar file, all the the app.libs files, and Windows exe.
     *   + The license file, ${base.licensefile}.
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="distEditor-win" depends="jar,exe4j-init"
              if="dist.exe4j.exists"
              description="Build and package the app for Windows distribution.">
        <make-windows-executables type="Editor"/>
        <property name="dist.zip.prefix.editor.win"
                  value="${distEditor.bundle.name}-${dist.bundle.version}-win"/>
        <zip destfile="${dist.dir}/${dist.zip.prefix.editor.win}.zip">
          <zipfileset prefix="${dist.zip.prefix.editor.win}/${dist.app.config.dir.name}"
                      dir="${app.config.dir}"/>
          <zipfileset prefix="${dist.zip.prefix.editor.win}/libs" dir="${app.lib.dir}"
                      includes="*"/>
          <zipfileset prefix="${dist.zip.prefix.editor.win}"
                      file="${app.dir}/${distEditor.win.exename}.exe"/>
          <zipfileset prefix="${dist.zip.prefix.editor.win}"
                      file="${app.dir}/${distEditor.win64.exename}.exe"/>
          <zipfileset file="${base.licensefile}"
                      fullpath="${dist.zip.prefix.editor.win}/LICENSE"/>
          <zipfileset prefix="${dist.zip.prefix.editor.win}" dir="${dist.dir}"
                      includes="${dist.jar.file}"/>
        </zip>
      </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  * Creates the Mac OS X distribution bundle under ${dist.dir}.
  * This is a zip file whose name is set to
  * ${dist.bundle.name}-${dist.bundle.version}-mac.zip
  * and whose contents are:
  *   + A config dir, containing all the app.config files.  The dir name is
  *     set to the name of the ${app.config.dir}.
  *   + The OMERO.insight application.  That is, the .app dir embedding the app
  *     jar file, all the the app.libs files, and Mac OS X specific config.
  *   + The install instructions, ${dist.osx.installfile}.
  *   + The license file, ${base.licensefile}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="distEditor-osx"
	        depends="jar"
	        description="Build and package the app for OS X distribution.">
  <jarbundler dir="${dist.dir}"
	        name="${distEditor.name}"
	        mainclass="${app.mainclass}"
	        version="${dist.bundle.version}"
	        infostring="${distEditor.name} Java Client, ${dist.bundle.version}"
	        aboutmenuname="${distEditor.name}"
	        screenmenu="true"
	        icon="${distEditor.osx.icon}"
	        stubfile="${dist.osx.stub}"
	        jvmversion="1.6+"
  	        vmoptions="${dist.vmparameters}"
  			arguments="containerEditor.xml">
	  <jarfileset refid="app.libs"/>
	  <jarfileset dir="${dist.dir}" includes="${dist.jar.file}"/>
  </jarbundler>
  <property name="dist.zip.prefix.editor.osx"
            value="${distEditor.bundle.name}-${dist.bundle.version}-mac"/>
	  <zip destfile="${dist.dir}/${dist.zip.prefix.editor.osx}.zip">
	     <zipfileset prefix="${dist.zip.prefix.editor.osx}/${dist.app.config.dir.name}"
	                 dir="${app.config.dir}"/>
	     <zipfileset prefix="${dist.zip.prefix.editor.osx}" dir="${dist.dir}"
	               includes="OMERO.editor.app/**"
	               excludes="**/${dist.osx.stub.name}"/>
	     <zipfileset file="${dist.osx.stub}"
	                 fullpath="${dist.zip.prefix.editor.osx}/OMERO.editor.app/Contents/MacOS/${dist.osx.stub.name}"
	                 filemode="775"/>
	     <zipfileset prefix="${dist.zip.prefix.editor.osx}"
	                 file="${dist.osx.installfile}"/>
	     <zipfileset file="${base.licensefile}"
	                 fullpath="${dist.zip.prefix.editor.osx}/LICENSE"/>
	  </zip>
  </target>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  * Creates the Windows distribution bundle under ${dist.dir}.
  * This is a zip file whose name is set to
  * ${dist.bundle.name}-${dist.bundle.version}-win.zip
  * and whose contents are:
  *   + A config dir, containing all the app.config files.  The dir name is
  *     set to the name of the ${app.config.dir}.
  *   + The OMERO.insight application.  That is, the .app dir embedding the app
  *     jar file, all the the app.libs files, and Windows exe.
  *   + The license file, ${base.licensefile}.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="distImporter-win" depends="jar,exe4j-init"
              if="dist.exe4j.exists"
              description="Build and package the app for Windows distribution.">
        <make-windows-executables type="Importer"/>
        <property name="dist.zip.prefix.importer.win"
                  value="${distImporter.bundle.name}-${dist.bundle.version}-win"/>
        <zip destfile="${dist.dir}/${dist.zip.prefix.importer.win}.zip">
          <zipfileset prefix="${dist.zip.prefix.importer.win}/${dist.app.config.dir.name}"
                      dir="${app.config.dir}"/>
          <zipfileset prefix="${dist.zip.prefix.importer.win}/libs" dir="${app.lib.dir}"
                      includes="*"/>
          <zipfileset prefix="${dist.zip.prefix.importer.win}"
                      file="${app.dir}/${distImporter.win.exename}.exe"/>
          <zipfileset prefix="${dist.zip.prefix.importer.win}"
                      file="${app.dir}/${distImporter.win64.exename}.exe"/>
          <zipfileset file="${base.licensefile}"
                      fullpath="${dist.zip.prefix.importer.win}/LICENSE"/>
          <zipfileset prefix="${dist.zip.prefix.importer.win}" dir="${dist.dir}"
                      includes="${dist.jar.file}"/>
        </zip>
      </target>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  * Creates the Mac OS X distribution bundle under ${dist.dir}.
  * This is a zip file whose name is set to
  * ${dist.bundle.name}-${dist.bundle.version}-mac.zip
  * and whose contents are:
  *   + A config dir, containing all the app.config files.  The dir name is
  *     set to the name of the ${app.config.dir}.
  *   + The OMERO.importer application.  That is, the .app dir embedding the app
  *     jar file, all the the app.libs files, and Mac OS X specific config.
  *   + The install instructions, ${dist.osx.installfile}.
  *   + The license file, ${base.licensefile}.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="distImporter-osx"
        depends="jar"
        description="Build and package the app for OS X distribution.">
  <jarbundler dir="${dist.dir}"
        name="${distImporter.name}"
        mainclass="${app.mainclass}"
        version="${dist.bundle.version}"
        infostring="${distImporter.name} Java Client, ${dist.bundle.version}"
        aboutmenuname="${distImporter.name}"
        screenmenu="true"
        icon="${distImporter.osx.icon}"
        stubfile="${dist.osx.stub}"
        jvmversion="1.6+"
  	    vmoptions="${dist.vmparameters}"
  arguments="containerImporter.xml">
  <jarfileset refid="app.libs"/>
  <jarfileset dir="${dist.dir}" includes="${dist.jar.file}"/>
  </jarbundler>
  <property name="dist.zip.prefix.importer.osx"
            value="${distImporter.bundle.name}-${dist.bundle.version}-mac"/>
  <zip destfile="${dist.dir}/${dist.zip.prefix.importer.osx}.zip">
     <zipfileset prefix="${dist.zip.prefix.importer.osx}/${dist.app.config.dir.name}"
                 dir="${app.config.dir}"/>
     <zipfileset prefix="${dist.zip.prefix.importer.osx}" dir="${dist.dir}"
               includes="OMERO.importer.app/**"
               excludes="**/${dist.osx.stub.name}"/>
     <zipfileset file="${dist.osx.stub}"
                 fullpath="${dist.zip.prefix.importer.osx}/OMERO.importer.app/Contents/MacOS/${dist.osx.stub.name}"
                 filemode="775"/>
     <zipfileset prefix="${dist.zip.prefix.importer.osx}"
                 file="${dist.osx.installfile}"/>
     <zipfileset file="${base.licensefile}"
                 fullpath="${dist.zip.prefix.importer.osx}/LICENSE"/>
  </zip>
	  </target>


  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Remove all output generated by the targets within this file.
   * This target simply deletes the ${dist.dir}, relying on the fact that all
   * other targets output under this dir.  As long as dir mapping props stick
   * to this rule, new targets can be added without modifying this one.
   * Should a target output dir need to be mapped to a dir outside of
   * ${dist.dir}, then an explicit delete has to be added here.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="clean"
          description="Remove all output generated by dist targets.">
    <delete dir="${dist.dir}"/>
  </target>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * Output a list of available targets.
   * This is the list of all public targets exported by this file.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="usage"
          description="List available distribution targets.">
    <echo level="info">
Distribution targets:
---------------------
  dist: Creates the distribution bundle under ${dist.dir}.
  dist-osx: Creates the Mac OS X distribution bundle under ${dist.dir}.
  dist-win: Creates the Windows distribution bundle under ${dist.dir}.
  dist-osx-openGL: Creates the Mac OS X distribution bundle under ${dist.dir} with OpenGL support.
  dist-win-openGL: Creates the Windows distribution bundle under ${dist.dir} with OpenGL support.
  dist-win64-openGL: Creates the Windows 64-bit distribution bundle under ${dist.dir} with OpenGL support.
  dist.clean: Remove ${dist.dir}.
    </echo>
  </target>

</project>
