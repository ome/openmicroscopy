<?xml version="1.0" encoding="UTF-8"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 * Library of custom Ant tasks. 
 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<antlib>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: checkdef
   * 
   * DESCRIPTION: 
   * Verifies that a given property or reference has been set.
   * This task checks whether the project contains a definition for the
   * specified property or reference and makes sure its value is not the
   * empty string.  If the check fails, the build is failed as well.
   * 
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  prop      The name of the property to check.                  No
   *  ref       The name of the reference to check.                 No
   *
   * EXTERNAL DEPENDENCIES: None.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="checkdef">
    <attribute name="prop" default=""/>
    <attribute name="ref" default=""/>
    <sequential>
      <!-- Check prop -->
      <if>
        <not><equals arg1="@{prop}" arg2=""/></not>
        <then>
          <if>
            <or>
              <not><isset property="@{prop}"/></not>
              <equals arg1="@{prop}" arg2=""/>
            </or>
            <then>
              <fail>@{prop} has not been set.</fail>
            </then>
          </if>
        </then>
      </if>
      <!-- Check ref -->
      <if>
        <not><equals arg1="@{ref}" arg2=""/></not>
        <then>
          <if>
            <not><isreference refid="@{ref}"/></not>
            <then>
              <fail>@{ref} has not been set.</fail>
            </then>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: checkdup
   * 
   * DESCRIPTION: 
   * Verifies that no file in @dir has the same name and relative path as 
   * existing files in @targetdir.  As an example consider the files 
   * @dir/some/path/foo.bar and @targetdir/some/path/foo.bar.  This task 
   * works on the entire directory trees.  If the check fails, the build 
   * is failed too.
   * 
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  dir       The origin directory.                               Yes
   *  targetdir The directory to compare.                           Yes
   *
   * EXTERNAL DEPENDENCIES: None.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="checkdup">
    <attribute name="dir" />
    <attribute name="targetdir" />
    <sequential>
      <fileset dir="@{dir}" id="checkdup.id">
        <present present="both" targetdir="@{targetdir}"/>
       </fileset>
       <pathconvert pathsep="\n" property="checkdup.found" refid="checkdup.id"/>
       <if>
         <not><equals arg1="${checkdup.found}" arg2=""/></not>
         <then>
           <fail> DUPLICATES FOUND!

Files were found that have the same name and relative as files in @{targetdir}:
${checkdup.found}
           </fail>
         </then>
      </if>
    </sequential>
  </macrodef>
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * TASK NAME: fop
   * 
   * DESCRIPTION: 
   * Third-party task to create a PDF from an XSL-FO document.
   * The FOP task comes from http://xml.apache.org/fop/.  See their docs for
   * parameters and usage.
   *
   * EXTERNAL DEPENDENCIES: fop, avalon-framework, batik, xerces
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <!-- DISABLED
  <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" /> 
  -->
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: makexdoc
   * 
   * DESCRIPTION: 
   * Transforms one XML doc into PDF and multi-page HTML.
   * This task takes a 'doc.xml' file (in our XML doc format) in a given source
   * directory and turns it into an AurigaDoc XML doc file.  Then the AurigaDoc
   * stylesheets are applied to obtain PDF and multi-page HTML docs.
   * All the generated files are output in the specified destination directory,
   * which is created new if it doesn't exist already.  The name of the PDF file
   * is set to 'doc.pdf'. 
   *
   * NOTE: This task *doesn't* copy the HTML resources (css, images, index 
   * pages, navigation menu) in the destination directory, it only generates 
   * the HTML files.
   * Moreover the source directory is *assumed* to contain a 'doc.xml' file.
   * If this doesn't hold true, the task will fail the build when invoked.
   * 
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  srcdir    A directory containing a 'doc.xml' file in our      Yes
   *            XML doc format.                               
   *  destdir   The directory where to output all doc files.        Yes
   *  auriga    Pathname of the stylesheet to convert the           Yes
   *            'doc.xml' file into an AurigaDoc file.
   *  fo        Pathname of the AurigaDoc stylesheet to generate    Yes
   *            the intermediate XSL-FO file from which we obtain
   *            the PDF.
   *  pdfstyle  URL of the XML file that maps the CSS file (used    Yes
   *            for HTML) into something the AurigaDoc XSL-FO
   *            stylesheet can digest.  This way, PDF files will 
   *            retain (to some extent) the same HTML style.
   *  mhtml     Pathname of the AurigaDoc stylesheet to generate    Yes
   *            the multi-page HTML document.
   *
   * EXTERNAL DEPENDENCIES: See fop task. 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="makexdoc">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <attribute name="auriga" /> 
    <attribute name="fo" />
    <attribute name="pdfstyle" />
    <attribute name="mhtml" /> 
    <sequential>

      <!-- Convert our 'doc.xml' file into an AurigaDoc file. -->
      <xslt style="@{auriga}" in="@{srcdir}/doc.xml" out="@{destdir}/auriga.doc"> 
        <outputproperty name="method" value="xml" /> 
      </xslt>
      
      <!-- Do PDF. --> 
      <xslt style="@{fo}" in="@{destdir}/auriga.doc" out="@{destdir}/doc.fo"> 
        <outputproperty name="method" value="xml" /> 
        <param name="css-file" expression="@{pdfstyle}" />  
      </xslt> 
      <fop format="application/pdf" 
           basedir="@{destdir}" 
           fofile="@{destdir}/doc.fo"
           outfile="@{destdir}/doc.pdf"
           messagelevel="warn" /> 
      <delete file="@{destdir}/doc.fo" />  <!-- Get rid of tmp file. -->

      <!-- Do multi-page HTML. --> 
      <xslt style="@{mhtml}" 
            in="@{destdir}/auriga.doc" 
            out="@{destdir}/index.htm"> 
        <outputproperty name="method" value="html" />
        <param name="abs-out-dir" expression="@{destdir}/" />
        <param name="index-file" expression="index.htm" /> 
      </xslt>
      
      <!-- Done, but get rid of tmp 'auriga.doc' in destdir. -->
      <delete file="@{destdir}/auriga.doc" />
    </sequential>
  </macrodef> 
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: xdocimg
   * 
   * DESCRIPTION: 
   * Copies the contents of srcdir/images to destdir/images.
   * 
   * NOTE: The srcdir should be an xdoc dir (that is, one that contains a
   * 'doc.xml' file) and is *assumed* to have an 'images' sub-directory.
   *
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  srcdir    The origin xdoc directory.                          Yes
   *  destdir   The destination directory where the xdoc will       Yes
   *            be output.                          
   *
   * EXTERNAL DEPENDENCIES: None.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="xdocimg">
	  <attribute name="srcdir" />
	  <attribute name="destdir" />
	  <sequential>   
      <copy todir="@{destdir}/images" includeemptydirs="no">
        <fileset dir="@{srcdir}/images" />
      </copy> 
	  </sequential>
	</macrodef> 
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: xdocres
   * 
   * DESCRIPTION: 
   * Copies all non-image resources needed to complete an xdoc-generated
   * HTML doc to the specified destdir.
   *
   * NOTE: The srcdir should be an xdoc dir (that is, one that contains a
   * 'doc.xml' file).  If 'doc.xml' is not found, the build will be failed.
   *
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  srcdir    The origin xdoc directory.                          Yes
   *  destdir   The destination directory where the xdoc will       Yes
   *            be output.                          
   *  navdir    The directory containing the index pages and the    Yes
   *            menu code to add to the generated HTML files.
   *  cssfile   The CSS stylesheet to link to the generated HTML    Yes
   *            files.
   *
   * EXTERNAL DEPENDENCIES: None. 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="xdocres">
    <attribute name="srcdir" />
    <attribute name="destdir" />
    <attribute name="navdir" /> 
    <attribute name="cssfile" /> 
    <sequential>
      <copy todir="@{destdir}/menu" file="@{srcdir}/doc.xml" />
      <copy todir="@{destdir}/menu" file="@{navdir}/nav-menu.jar" />
      <copy todir="@{destdir}">
        <fileset dir="@{navdir}/html" />
      </copy> 
      <copy todir="@{destdir}/styles" file="@{cssfile}" />  
    </sequential>
  </macrodef>   
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: xdoc
   * 
   * DESCRIPTION: 
   * Generates PDF and HTML/DHTML docs from every xdoc directory found in the
   * specified base source directory.
   * This task scans the base source directory tree looking for directories
   * containing a 'doc.xml' file.  Each of those directories is taken to be an
   * xdoc directory, that is one containing an XML/HTML set of files that have
   * to be transformed into PDF and HTML.  This task then runs the 
   * makexdoc, xdocimg, and xdocres tasks on each xdoc directory to produce a
   * complete documentation set under the specified base destination directory.
   * Relative directory structure is preserved; for example the output documents
   * generated from srcdir/an/xdoc/dir would be put under destdir/an/xdoc/dir.
   *
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  srcdir    The base source directory.                          Yes                               
   *  destdir   The base output directory.                          Yes
   *  auriga    Pathname of the stylesheet to convert the           Yes
   *            'doc.xml' file into an AurigaDoc file.
   *  fo        Pathname of the AurigaDoc stylesheet to generate    Yes
   *            the intermediate XSL-FO file from which we obtain
   *            the PDF.
   *  pdfstyle  Pathname of the XML file that maps the CSS file     Yes
   *            (used for HTML) into something the AurigaDoc
   *            XSL-FO stylesheet can digest.  This way, PDF files
   *            will retain (to some extent) the same HTML style.
   *            If an xdoc directory contains a 'style.xml' file,
   *            then that file will be used instead.
   *  mhtml     Pathname of the AurigaDoc stylesheet to generate    Yes
   *            the multi-page HTML document.
   *  navdir    The directory containing the index pages and the    Yes
   *            menu code to add to the generated HTML files.
   *  cssfile   The CSS stylesheet to link to the generated HTML/   Yes
   *            DHTML files.  If an xdoc directory contains a 
   *            'style.css' file, then that file will be used 
   *            instead.
   *
   * EXTERNAL DEPENDENCIES: bsf and rhino.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <!-- DISABLED
  <scriptdef name="xdoc" language="javascript">
	  <attribute name="srcdir" />
	  <attribute name="destdir" />
	  <attribute name="auriga" /> 
	  <attribute name="fo" />
	  <attribute name="pdfstyle" />
	  <attribute name="mhtml" />  
    <attribute name="navdir" /> 
    <attribute name="cssfile" />  
    <![CDATA[

      //Utility to convert a file pathname to a URL string.    
      function fileToURL(file)
      {
        try {
          var f = new java.io.File(file);       
          return f.toURL().toString();
        } catch (exc) {
          throw new Packages.org.apache.tools.ant.BuildException(
                                      "Can't convert file to URL: "+file+".");
        }
      }

      //Sets the specified attributes in the task's RuntimeConfigurable.
      //(Because the tasks we use are defined through macrodefs, we don't
      //get explicit methods like setSrcDir/setAuriga/etc. and so we have
      //to use generic attributes.) 
      function configureTask(taskCfg, attrNames)
      {
        for (var i = 0, value = ""; i < attrNames.length; ++i) {
          value = attributes.get(attrNames[i]); 
          if (value == null) 
            throw new Packages.org.apache.tools.ant.BuildException(
                                   "Undefined "+attrNames[i]+" attribute.");
          taskCfg.setAttribute(attrNames[i], value);
        }
      }
  
      //Knows how to generate a complete set of docs (PDF, HTML, etc.) from
      //a source xdoc dir. (That is, one containing a 'doc.xml' file.)
      //Every instance works on a specific source/destination dir and, 
      //optionally, on custom pdf/css style files if found in the source dir;
      //all other input attributes (auriga, fo, etc.) stay the same across 
      //different instances.  The run method generates all the docs.  Keep in
      //mind that before calling run(), the source directory has to be set to
      //the absolute path of an xdoc dir.  Also the destination dir has to be
      //set to the absolute path of the dir where to output the docs. 
      function XDoc()
      {
        this.task = project.createTask("makexdoc");
        var taskCfg = this.task.getRuntimeConfigurableWrapper();
        var attrNames = ["srcdir", "destdir", "auriga", "fo", "pdfstyle", 
                          "mhtml"];
        configureTask(taskCfg, attrNames);
        //Re-set the pdfstyle attribute, as we get a pathname in.
        taskCfg.setAttribute("pdfstyle", fileToURL(attributes.get("pdfstyle")));        
        
        this.imgTask = project.createTask("xdocimg");
        taskCfg = this.imgTask.getRuntimeConfigurableWrapper(); 
        attrNames = ["srcdir", "destdir"];
        configureTask(taskCfg, attrNames);
 
			  this.resTask = project.createTask("xdocres");
			  taskCfg = this.resTask.getRuntimeConfigurableWrapper(); 
			  attrNames = ["srcdir", "destdir", "navdir", "cssfile"];
			  configureTask(taskCfg, attrNames);
        
        this.srcDir = null; 
      }
		  XDoc.prototype.setSrcDir = function (dir)  //Must be an absolute path.
		  { 
		    var taskCfg = this.task.getRuntimeConfigurableWrapper(); 
		    taskCfg.setAttribute("srcdir", dir); 
		    taskCfg = this.imgTask.getRuntimeConfigurableWrapper(); 
		    taskCfg.setAttribute("srcdir", dir);
        taskCfg = this.resTask.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("srcdir", dir); 
        this.srcDir = dir; 
		  } 
      XDoc.prototype.setDestDir = function (dir)  //Must be an absolute path. 
      { 
        var taskCfg = this.task.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("destdir", dir); 
        taskCfg = this.imgTask.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("destdir", dir);
        taskCfg = this.resTask.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("destdir", dir);  
      }
      XDoc.prototype.setPDFStyle = function (file)  //Must be an absolute path. 
      { 
        var taskCfg = this.task.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("pdfstyle", fileToURL(file));
      } 
      XDoc.prototype.setCSSFile = function (file)  //Must be an absolute path. 
      { 
        var taskCfg = this.resTask.getRuntimeConfigurableWrapper(); 
        taskCfg.setAttribute("cssfile", file);   
      } 
      XDoc.prototype.run = function () 
      {   
   
        //Run xdocres to copy resources in destdir.  If srcdir contains a
        //custom 'style.css' file, then use it.  Otherwise default to the
        //one specified by the cssfile input attribute.
        var customCSSFile = new java.io.File(this.srcDir, "style.css");
        if (customCSSFile.exists() && customCSSFile.isFile())
          this.setCSSFile(customCSSFile.toString()); 
        this.resTask.perform();  
        
        //If there's an images dir, then run the xdocimg task to copy all
        //images in destdir. 
        var imagesDir = new java.io.File(this.srcDir, "images");
        if (imagesDir.exists() && imagesDir.isDirectory())
          this.imgTask.perform(); 

        //Run makexdoc on srcdir and destdir.  If srcdir contains a custom
        //'style.xml' file, then use it.  Otherwise default to the one 
        //specified by the pdfstyle input attribute.
        var customPDFStyle = new java.io.File(this.srcDir, "style.xml");
        if (customPDFStyle.exists() && customPDFStyle.isFile())
          this.setPDFStyle(customPDFStyle.toString());
        this.task.perform();
      }  
  
      //Finds all xdoc dirs within the specified base dir.
      //Returned paths will be relative to the base dir.  If the base dir
      //is a xdoc dir too (that is, contains a 'doc.xml' file), then one
      //of the returned paths will be the empty string.
      function getXdocDirs(baseDir)
      {
        var scanner = new Packages.org.apache.tools.ant.DirectoryScanner(); 
        scanner.setBasedir(baseDir);
        scanner.setIncludes(["**/doc.xml"]);
        scanner.scan(); 
        var xdocFiles = scanner.getIncludedFiles();
        var dirs = new Array(xdocFiles.length); 
        for (var i = 0, str=""; i < xdocFiles.length; ++i) {
          str = ""+xdocFiles[i]; 
          dirs[i] = str.substring(0, str.length-8);  
          //The above will strip "/doc.xml" out of dir[i].  
          //If dir[i]="doc.xml", then "" is returned.
        } 
        return dirs; 
      }  
  
      //Run an XDoc for each xdoc dir found in the base source dir.
      var baseSrcDir = attributes.get("srcdir"),
          baseDestDir = attributes.get("destdir"); 
      var matchingDirs = getXdocDirs(baseSrcDir), xdoc = null,
          sep = ""+java.io.File.separator;
      for (var i = 0; i < matchingDirs.length; ++i) {
        xdoc = new XDoc();
        xdoc.setSrcDir(baseSrcDir+sep+matchingDirs[i]); 
        xdoc.setDestDir(baseDestDir+sep+matchingDirs[i]); 
        xdoc.run(); 
      } 
      
    ]]> 
  </scriptdef>
  -->
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   * TASK NAME: jarbundler
   * 
   * DESCRIPTION: 
   * Third-party task to create a Mac OS X distribution bundle.
   * The Jar Bundler task comes from http://informagen.com/JarBundler/.  
   * See their docs for parameters and usage.
   *
   * EXTERNAL DEPENDENCIES: jarbundler
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <taskdef name="jarbundler"
      classname="net.sourceforge.jarbundler.JarBundler" >
      <classpath refid="insight.tools.path" />
  </taskdef>

</antlib>
