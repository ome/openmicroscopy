<?xml version="1.0" encoding="UTF-8"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 * Library of custom Ant tasks. 
 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<antlib>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: checkdef
   * 
   * DESCRIPTION: 
   * Verifies that a given property or reference has been set.
   * This task checks whether the project contains a definition for the
   * specified property or reference and makes sure its value is not the
   * empty string.  If the check fails, the build is failed as well.
   * 
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  prop      The name of the property to check.                  No
   *  ref       The name of the reference to check.                 No
   *
   * EXTERNAL DEPENDENCIES: None.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="checkdef">
    <attribute name="prop" default=""/>
    <attribute name="ref" default=""/>
    <sequential>
      <!-- Check prop -->
      <if>
        <not><equals arg1="@{prop}" arg2=""/></not>
        <then>
          <if>
            <or>
              <not><isset property="@{prop}"/></not>
              <equals arg1="@{prop}" arg2=""/>
            </or>
            <then>
              <fail>@{prop} has not been set.</fail>
            </then>
          </if>
        </then>
      </if>
      <!-- Check ref -->
      <if>
        <not><equals arg1="@{ref}" arg2=""/></not>
        <then>
          <if>
            <not><isreference refid="@{ref}"/></not>
            <then>
              <fail>@{ref} has not been set.</fail>
            </then>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>
 
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * TASK NAME: checkdup
   * 
   * DESCRIPTION: 
   * Verifies that no file in @dir has the same name and relative path as 
   * existing files in @targetdir.  As an example consider the files 
   * @dir/some/path/foo.bar and @targetdir/some/path/foo.bar.  This task 
   * works on the entire directory trees.  If the check fails, the build 
   * is failed too.
   * 
   * PARAMETERS:
   *  Attibute  Description                                       Required
   *  dir       The origin directory.                               Yes
   *  targetdir The directory to compare.                           Yes
   *
   * EXTERNAL DEPENDENCIES: None.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--> 
  <macrodef name="checkdup">
    <attribute name="dir" />
    <attribute name="targetdir" />
    <sequential>
      <fileset dir="@{dir}" id="checkdup.id">
        <present present="both" targetdir="@{targetdir}"/>
       </fileset>
       <pathconvert pathsep="\n" property="checkdup.found" refid="checkdup.id"/>
       <if>
         <not><equals arg1="${checkdup.found}" arg2=""/></not>
         <then>
           <fail> DUPLICATES FOUND!

Files were found that have the same name and relative as files in @{targetdir}:
${checkdup.found}
           </fail>
         </then>
      </if>
    </sequential>
  </macrodef>
</antlib>
