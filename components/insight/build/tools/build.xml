<?xml version="1.0" encoding="UTF-8"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 * Build file for the OME Java Client (Shoola) Build Tool.
 * Use this file to build and deploy the Build Tool.
 * This is an Ant build file and requires Ant 1.5 or later to run the build.
 *
 * The Build Tool is a Java program that invokes Ant to process the OME-Shoola
 * build file.  It's composed of just one source file - 'build.java', in the 
 * same directory containing this build file, that is 'tools'.  The 'tools' 
 * directory also hosts the Ant core jars, the Ant jars for the optional tasks 
 * used by the build system, and all the external libraries required for those 
 * optional tasks.
 * The Build Tool loads the Ant core and all the other libraries dynamically
 * from the 'tools' directory, prepares a suitable environment, and then
 * invokes Ant with whatever arguments were supplied on the command line.
 *
 * All this means you don't need to have Ant on your machine to run a build.
 * This way, you won't have to install/upgrade and tweak Ant to run Shoola's
 * build file.  All that is required is a JDK (1.4 or later).
 *
 * The build tool is deployed under the 'build' directory and it's possible to
 * run a build from there as follows:
 *
 *      java build [options] [target1 [target2 [target3] ...]]
 *
 * Where 'options' are any of the Ant options and 'targetN' is any of the 
 * available targets.
 *
 * ______
 * NOTES:
 *
 * 1. Default compilation tasks in Ant require the *Sun* JDK tools.  Those
 *    ship with Sun JDKs and are contained in the 'lib/tools.jar'.  If you have
 *    a JDK from another vendor (or just a plain JRE), the Sun JDK tools might 
 *    not be available, in which case compilation of Shoola would fail.  To fix
 *    this, proceed as follows:
 *      + Make sure the Sun JDK tools are not available to the JVM you will use
 *        to invoke the Build Tool.  Just run 'java build compile'; if it fails
 *        the Sun JDK tools are not available.
 *      + Download the Sun JDK tools jar file into this directory ('tools').
 *        Make sure the version of the JDK tools is the same as the one of the 
 *        JVM that you will use to invoke the Build Tool.  
 *        (Failure to comply may result in compilation errors due to class 
 *        file version incompatibilities.)
 *    
 *    It's important to verify that the JDK tools are not available before
 *    dropping another copy into our 'tools' directory.  In fact, if the JDK 
 *    tools are already available, adding a copy under 'tools' would result in 
 *    having two sets of JDK tools classes on the classpath.  As you can 
 *    imagine, some nasty runtime behavior could originate from that if the 
 *    JDK tools have different versions.    
 *
 * 2. Ant requires some XML libs to run.  Even though JDK 1.4 already ships
 *    with those libraries (Xerces and Xalan), we included them nonetheless.
 *    The reason is simple: because of the JAXP pluggability layer, different
 *    JAXP implementations could be used, thus overriding the defaults.  Since
 *    we tested the build tool with Xerces 2.6.2 and Xalan 2.6.0, we link the
 *    Build Tool to those libraries and make sure the system JAXP settings will
 *    be overridden to use our libs.
 *
 * 3. If you need to rebuild the Build Tool and don't have Ant, you can do that
 *    manually - provided you have a Java compiler.  Just compile 'build.java'
 *    and then copy 'build.class' in the 'build' directory.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<project name="OME-Shoola/Build Tool" default="deploy" basedir=".">
  
   
  <!-- The directory where the Build Tool is to be deployed. --> 
  <property name="deploy.dir" location=".." />
  
  <!-- 
    Compiles the build class in ${deploy.dir}. 
    The source and target switches make sure build is compiled just like
    it would be compiled under 1.4 if a later compiler is used.  (Versions
    are set to 1.2 because such are the defaults of 1.4.)
  -->
  <target name="deploy">
    <javac srcdir="."
           destdir="${deploy.dir}"
           target="1.2"
           source="1.2"
           includeantruntime="no"
           encoding="UTF-8"
           deprecation="yes"
           debug="yes"
           debuglevel="lines,vars,source" />
  </target>
 
  <!-- Removes all class files in ${deploy.dir}. --> 
  <target name="clean">
		<delete>
			<fileset dir="${deploy.dir}" includes="*.class"/>
		</delete>
  </target> 

</project>