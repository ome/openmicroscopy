#!/usr/bin/env python
# encoding: utf-8

"""
Retrieves the JARs from the latest Hudson based build of the Bio-Formats
software repository.
"""

# Copyright (C) 2009 University of Dundee

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import urllib
import sys
import re
import os

from subprocess import Popen
from getopt import getopt, GetoptError
from glob import glob

# Handle Python 2.5 built-in ElementTree
try:
        from xml.etree.ElementTree import XML, ElementTree, tostring
except ImportError:
        from elementtree.ElementTree import XML, ElementTree, tostring

def usage(error):
    """Prints usage so that we don't have to. :)"""
    cmd = sys.argv[0]
    print """%s
Usage: %s [--git, --simple]
Retrieves and updates Bio-Formats JARs from Hudson

Options:
  --git      Performs Git commands to update the working copy
  --simple   Does not perform any special version number manipulation of
             the JAR files.

Examples:
  %s --git
  %s --simple

Report bugs to ome-devel@lists.openmicroscopy.org.uk""" % (error, cmd, cmd)
    sys.exit(2)

def download(simple=False):
    # JARs to ignore from download
    ignore = ["loci_tools.jar", "ome_tools.jar"]
    url = urllib.urlopen("http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/lastBuild/api/xml")
    hudson_xml = url.read()
    hudson_xml = hudson_xml.replace('origin/', 'origin_')
    url.close()
    root = XML(hudson_xml)

    revision = root.findtext("./action/lastBuiltRevision/SHA1")
    artifacts = root.findall("./artifact")
    print "Updating Bio-Formats JARs from revision: %s" % revision
    base_url = "http://hudson.openmicroscopy.org.uk/job/BIOFORMATS-trunk/lastBuild/artifact/"
    new_jars = list()
    for artifact in artifacts:
        filename = artifact.find("fileName").text
        if filename in ignore:
            continue
        if not simple:
            filename = "%s-%s.jar" % (filename[:-4], revision[:7])
        jar_url = base_url + artifact.findtext("relativePath")
        print "Downloading %s from URL %s" % (filename, jar_url)
        urllib.urlretrieve(jar_url, filename)
        new_jars.append(filename)
    return [revision, new_jars]
    
def update(revision, new_jars):
    print "Updating local Subversion repository"
    revision = revision[:7]
    f = open("../../etc/omero.properties")
    properties = f.read()
    f.close()
    regex = re.compile(r'.*versions.bio-formats=([^\n]*)', re.DOTALL)
    old_revision = regex.match(properties).group(1)
    print "Old revision is: %s" % old_revision

    args = ['git', 'rm', '--f'] + glob('*%s.jar' % old_revision)
    p = Popen(args)
    os.waitpid(p.pid, 0)
    args = ['git', 'add'] + glob('*%s.jar' % revision)
    p = Popen(args)
    os.waitpid(p.pid, 0)

    regex = re.compile('versions.bio-formats=%s' % old_revision)
    properties = regex.sub('versions.bio-formats=%s' % revision, properties)
    f = open("../../etc/omero.properties", 'w')
    f.write(properties)
    f.close()
    
if __name__ == "__main__":
    try:
        options, args = getopt(sys.argv[1:], "", ['git', 'simple'])
    except GetoptError, (msg, opt):
        usage(msg)

    do_update = False
    simple = False
    for option, argument in options:
        if option == '--git':
            do_update = True
        if option == '--simple':
            simple = True
    revision, new_jars = download(simple)
    if do_update:
        update(revision, new_jars)
