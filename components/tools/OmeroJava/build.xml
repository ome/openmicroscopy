<?xml version="1.0" encoding="utf-8"?>
<project name="OmeroJava" default="install" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2008-2013 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-->
    <description>
    OmeroJava is the integration test suite for the server services.
    </description>

    <dirname property="up-two" file="${basedir}"/>
    <dirname property="up-one" file="${up-two}"/>
    <property name="import.dir" value="${up-one}/antlib/resources"/>
    <property name="integration.suite" value="integration.testng.xml"/>

    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>

    <defineVariables/>
    <import file="../common.xml"/>

    <target name="slice">
        <echo>no-op</echo>
    </target>

    <target name="compile" depends="pre-compile">
        <echo>no-op</echo>
    </target>

    <target name="tools-init">
        <echo>no-op</echo>
    </target>

    <target name="pre-compile" depends="generate">
        <!-- These first tasks are "pseudo-compiles" copying in
        resources from other builds and jars to be packaged into
        the super jar -->
        <copy todir="${target.dir}/generated-classes">
            <fileset dir="${nio.comp}/target/classes">
                <include name="ome/formats/**/*.class"/>
            </fileset>
            <fileset dir="${blitz.comp}/target/classes">
                <include name="ome/formats/**/*.class"/>
                <include name="ome/services/**/*.class"/>
                <include name="omero/**/*.class"/>
                <exclude name="omero/**/_*Tie.class"/>
                <exclude name="omero/_*Del*.class"/>
                <exclude name="omero/internal/**"/>
                <exclude name="omero/model/_*Del*.class"/>
                <exclude name="omero/sys/_*Del*.class"/>
            </fileset>
            <fileset dir="${common.comp}/target/classes">
                <include name="ome/system/*.class"/>
                <include name="ome/util/checksum/*.class"/>
            </fileset>
            <fileset dir="${model.comp}/target/classes">
                <include name="ome/model/**/*.class"/>
                <include name="ome/util/*.class"/>
                <include name="ome/conditions/**/*.class"/>
            </fileset>
        </copy>
        <unjar dest="${target.dir}/generated-classes">
            <fileset dir="${target.dir}/libs">
                <include name="ice*.jar"/>
                <include name="glacier*.jar"/>
                <include name="freeze*.jar"/>
                <include name="ome-xml.jar"/>
            </fileset>
        </unjar>

    </target>

    <target name="package" depends="compile">
    <!-- depending on compile like lifecycle.package does -->
        <jar update="true" destfile="${target.dir}/${ivy.module}.jar">
            <manifest>
                <attribute name="Class-Path" value=""/>
                <attribute name="Main-Class" value=""/>
            </manifest>
            <fileset dir="${classes.dir}"
                includes="**/*.class,omero.properties"/>
            <fileset dir="${target.dir}/generated-classes"/>
        </jar>

        <if><equals arg1="true" arg2="${package-extra}"/>
            <then>

        <jar destfile="${target.dir}/${ivy.module}-sources.jar">
            <!-- FIXME: Start off with some of the source classes -->
            <fileset dir="${blitz.comp}/src">
                <include name="ome/formats/**/*.java"/>
                <include name="omero/**/*.java"/>
            </fileset>
        </jar>
        <copy file="${blitz.comp}/target/blitz-javadoc.jar"
            tofile="${target.dir}/${ivy.module}-javadoc.jar"/>

        </then></if>
    </target>

    <target name="tools-build" depends="tools-init,install"
        description="Creates all artifacts for tools/target"/>

    <target name="tools-dist" depends="tools-build"
        description="Copy artifacts to tools/target"/>

    <target name="tools-clean" depends="clean">
        <delete dir="${basedir}/target"/>
    </target>

    <target name="test-compile" depends="lifecycle.test-compile"
        description="Unzips test dependencies and then calls lifecycle.test">
        <unjar src="${target.dir}/libs/test/common-test.jar"
            dest="${classes.dir}">
            <patternset>
                <include name="tiny*dv"/>
                <include name="test.bmp"/>
                <include name="test.jpg"/>
                <include name="test.txt"/>
            </patternset>
        </unjar>
    </target>

    <target name="broken" depends="test-compile" unless="test.skip"
        description="Run broken integration tests">
        <property name="test.with.fail" value="false"/>
        <suite testnames="broken">
            <xmlfileset dir="${test.dir}">
                <include name="${integration.suite}"/>
            </xmlfileset>
        </suite>
    </target>

    <target name="integration" depends="test-compile" unless="test.skip"
        description="Run passing integration tests">
        <property name="test.with.fail" value="false"/>
        <suite testnames="integration">
            <xmlfileset dir="${test.dir}">
                <include name="${integration.suite}"/>
            </xmlfileset>
        </suite>
    </target>

</project>
